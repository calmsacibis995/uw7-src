/*
 *	@(#) m4-6x.xgi 12.1 95/05/09 
 *
 * Copyright (C) 1994 The Santa Cruz Operation, Inc.
 *
 * The information in this file is provided for the exclusive use of the
 * licensees of The Santa Cruz Operation, Inc.  Such users have the right 
 * to use, modify, and incorporate this code into other products for purposes 
 * authorized by the license agreement provided they include this notice 
 * and the associated copyright notice with any such product.  The 
 * information in this file is provided "AS IS" without warranty.
 * 
 */
/* ************************************************************************ *
 * olivetti m4-6x.xgi  GrafInfo File for Olivetti M4-62/64/66 computers     * 
 *                                                                          *
 * OLIVETTI.M4-6x.SVGA.1024x768-256-60  SUPER VGA 1024x768 256 colours 60Hz *
 *                                                                          *
 *                              CHIP SET Cirrus GD5428                      *
 *                                                                          *
 * ************************************************************************ */


VENDOR OLIVETTI "OLIVETTI"
 MODEL  M4-6x  "M4-62/64/66   SVGA"
  CLASS  SVGA         "SVGA"
   MODE   1024x768-256-60 "1024x768 256 colors 60Hz non interlaced"

    MEMORY(0xA0000,0x10000);
    PORT(VGA);

    DATA
        {
        XDRIVER     = "mw";
        VISUAL      = "PseudoColor";
        DEPTH       = 8;
        DEVTYPE     = 1;
        DEVTECH     = 4;
        PIXWIDTH    = 1024;
        PIXHEIGHT   = 768;
        PIXBYTES    = 1024;
        PIXBITS     = 8;
        PIXPLANES   = 1;
        MAPTYPE     = "CIRRUS542X_2_32K";
        VBIOSOPTS   = 8;
        }

    PROCEDURE  SetGraphics
        {
/* Liana Paola MASERO - Sergio MARABOTTO  Olivetti */

/* We do not use int10 Bios call
        r0 = 0x1205;             monitor type == 5
        r1 = 0xa2;               set monitor type
        int10(r0, 2);

        r0 = 0x0060;
        int10(r0, 1);
*/

/* LIANA sequencer */
        out (0x3c4, 0x06);
        out (0x3c5, 0x12);
        out (0x3c4, 0x12);
        out (0x3c5, 0x00);

        out (0x3c4, 0x00);
        out (0x3c5, 0x01);
        out (0x3c4, 0x01);
        out (0x3c5, 0x01);
        out (0x3c4, 0x02);
        out (0x3c5, 0x0f);
        out (0x3c4, 0x03);
        out (0x3c5, 0x00);
        out (0x3c4, 0x04);
        out (0x3c5, 0x0e);
        out (0x3c4, 0x07);
        out (0x3c5, 0x01);
        out (0x3c4, 0x08);
        out (0x3c5, 0x00);
        out (0x3c4, 0x0b);
        out (0x3c5, 0x4a);
        out (0x3c4, 0x0c);
        out (0x3c5, 0x5b);
        out (0x3c4, 0x0d);
        out (0x3c5, 0x45);
        out (0x3c4, 0x0e);
        out (0x3c5, 0x3b);
        out (0x3c4, 0x1b);
        out (0x3c5, 0x2b);
        out (0x3c4, 0x1c);
        out (0x3c5, 0x2f);
        out (0x3c4, 0x1d);
        out (0x3c5, 0x30);
        out (0x3c4, 0x1e);
        out (0x3c5, 0x1a);

        out (0x3c4, 0x0f);
        in (r63, 0x3c5);
        and (r63, 0xdf);
        xor (r63, 0x20);
        out (0x3c5, r63);

        out (0x3c2, 0xef);      /* misc */

        out (0x3ce, 0x06);
        out (0x3cf, 0x05);

        out (0x3c4, 0x00);
        out (0x3c5, 0x03);
/* LIANA */
/* LIANA CRTC */
        out (0x3d4, 0x11);
        out (0x3d5, 0x20);

        out (0x3d4, 0x00);
        out (0x3d5, 0xa3);
        out (0x3d4, 0x01);
        out (0x3d5, 0x7f);
        out (0x3d4, 0x02);
        out (0x3d5, 0x80);
        out (0x3d4, 0x03);
        out (0x3d5, 0x86);
        out (0x3d4, 0x04);
        out (0x3d5, 0x85);
        out (0x3d4, 0x05);
        out (0x3d5, 0x96);
        out (0x3d4, 0x06);
        out (0x3d5, 0x24);
        out (0x3d4, 0x07);
        out (0x3d5, 0xfd);
        out (0x3d4, 0x08);
        out (0x3d5, 0x00);
        out (0x3d4, 0x09);
        out (0x3d5, 0x60);
        out (0x3d4, 0x0a);
        out (0x3d5, 0x00);
        out (0x3d4, 0x0b);
        out (0x3d5, 0x00);
        out (0x3d4, 0x0c);
        out (0x3d5, 0x00);
        out (0x3d4, 0x0d);
        out (0x3d5, 0x00);
        out (0x3d4, 0x0e);
        out (0x3d5, 0x00);
        out (0x3d4, 0x0f);
        out (0x3d5, 0x00);
        out (0x3d4, 0x10);
        out (0x3d5, 0x02);
        out (0x3d4, 0x11);
        out (0x3d5, 0x88);
        out (0x3d4, 0x12);
        out (0x3d5, 0xff);
        out (0x3d4, 0x13);
        out (0x3d5, 0x80);
        out (0x3d4, 0x14);
        out (0x3d5, 0x00);
        out (0x3d4, 0x15);
        out (0x3d5, 0x00);
        out (0x3d4, 0x16);
        out (0x3d5, 0x24);
        out (0x3d4, 0x17);
        out (0x3d5, 0xe3);
        out (0x3d4, 0x18);
        out (0x3d5, 0xff);
        out (0x3d4, 0x19);
        out (0x3d5, 0x4a);
        out (0x3d4, 0x1a);
        out (0x3d5, 0x00);
        out (0x3d4, 0x1b);
        out (0x3d5, 0x22);
/* LIANA */
/* LIANA graphics */
        out (0x3ce, 0x00);
        out (0x3cf, 0x00);
        out (0x3ce, 0x01);
        out (0x3cf, 0x00);
        out (0x3ce, 0x02);
        out (0x3cf, 0x00);
        out (0x3ce, 0x03);
        out (0x3cf, 0x00);
        out (0x3ce, 0x04);
        out (0x3cf, 0x00);
        out (0x3ce, 0x05);
        out (0x3cf, 0x40);
        out (0x3ce, 0x06);
        out (0x3cf, 0x05);
        out (0x3ce, 0x07);
        out (0x3cf, 0x0f);
        out (0x3ce, 0x08);
        out (0x3cf, 0xff);
/* LIANA */
/* LIANA attributes */
        in (r63, 0x3da);

        out (0x3c0, 0x00);
        out (0x3c0, 0x01);
        out (0x3c0, 0x02);
        out (0x3c0, 0x03);
        out (0x3c0, 0x04);
        out (0x3c0, 0x05);
        out (0x3c0, 0x06);
        out (0x3c0, 0x07);
        out (0x3c0, 0x08);
        out (0x3c0, 0x09);
        out (0x3c0, 0x0a);
        out (0x3c0, 0x0b);
        out (0x3c0, 0x0c);
        out (0x3c0, 0x0d);
        out (0x3c0, 0x0e);
        out (0x3c0, 0x0f);
        out (0x3c0, 0x10);
        out (0x3c0, 0x41);
        out (0x3c0, 0x11);
        out (0x3c0, 0x00);
        out (0x3c0, 0x12);
        out (0x3c0, 0x0f);
        out (0x3c0, 0x13);
        out (0x3c0, 0x00);
        out (0x3c0, 0x14);
        out (0x3c0, 0x00);

        out (0x3c0, 0x20);      /* turn video on */

        out (0x3c6, 0xff);      /* DAC pixel mask port */
/* LIANA */

        out(0x3ce, 0x0b);       /* select extension reg i/o port */
        in(r63,0x3cf);          /* read data */
        or(r63,0x01);           /* data = enable 32K page, dual page */
        out(0x3cf, r63);        /* write i/o port */

/* LIANA graphics */
        out (0x3ce, 0x09);
        out (0x3cf, 0x00);
        out (0x3ce, 0x0A);
        out (0x3cf, 0x00);
        out (0x3ce, 0x0B);
        out (0x3cf, 0x01);
 /* LIANA */
        }

    PROCEDURE SetText
        {
        r0 = 0x0003;
        int10(r0, 1);
        }


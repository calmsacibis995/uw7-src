%% Dynamically Loadable Module (DLM) Parameters
%C Dynamically Loadable Module (DLM) Parameters
These tunable parameters are associated with Dynamically Loadable Module
processing.
% BDEV_RESERVE
The number of empty slots reserved in the
bdevsw,
block device switch,
table
that can be used by a loadable block device driver.
This parameter supports the loadable module feature.
% CDEV_RESERVE
The number of empty slots reserved in the
cdevsw,
character block device switch,
table
that can be used by a loadable block device driver.
This parameter supports the loadable module feature.
% DEF_UNLOAD_DELAY
The global default auto-unload delay time.
Loadable modules will not be auto-unloaded
unless the module is idle for at least the number of seconds
specified for this parameter.
Each loadable module can override
the global default for auto-unload delay
by specifying its own auto-unload delay in the
Mtune
file for the module.
The name of the module's unload delay tunable parameter,
PREFIX_UNLOAD_DELAY,
must begin
with the ``prefix'' field from Master(4) converted to upper case letters.
% FMOD_RESERVE
The number of empty slots reserved in the
fmodsw,
strings modules switch,
table
that can be used by a loadable block device driver.
This parameter supports the loadable module feature.
% VFS_RESERVE
The number of empty slots reserved in the
vfssw,
file systems switch,
table
that can be used by a loadable block device driver.
This parameter supports the loadable module feature.
%% Miscellaneous Parameters
% NULLPTR
Controls the default state of the null pointer workaround
and whether logging should occur.
When the value is 0,
the workaround is disabled by default,
and logging is disabled;
when the value is 1,
the workaround is enabled by default, and
logging is disabled;
when the value is 2, the workaround is enabled by default,
and logging is enabled.
The default value is 1.

When the workaround is enabled [either by default or through the
nullptr(1) command], null pointer reads return zero instead of
faulting with SIGSEGV.
When logging is enabled and the workaround is enabled for a process,
the first time an executable program in that process reads a null pointer,
a message is sent to the console.
% USER_RDPMC
When non-zero, the user can use the rdpmc instruction, if available.
% USER_RDTSC
When non-zero, the user can use the rdtsc instruction, if available.
%% Process Limit Parameters
%%% General Process Limit Parameters
% MAXULWP
Maximum number per user of additional lightweight processes (LWPs)
created explicitly using _lwp_create.
This number does not include the initial LWP that is automatically
a part of every process.
This limit is not enforced for privileged processes; that is,
for those processes with the P_SYSOPS privilege.
% MAXUP
Maximum number of concurrent processes per user.
This limit is not enforced for privileged processes; that is,
for those processes with the P_SYSOPS privilege.
% NPROC
Maximum number of concurrent processes system-wide.
%% Timer and Scheduler Parameters
% MAXCLSYSPRI
Maximum global priority used by the
SYS
scheduling class
for scheduling kernel processes.
When the kernel starts system processes,
it assigns their priorities using MAXCLSYSPRI
as a reference point.

Changing this parameter changes the range
of priorities used to schedule kernel processes
and can have a significant effect on
the performance of the system.
In general, there is no need to change this parameter
unless you add new scheduling classes
or reconfigure the priorities of
other currently configured classes.

The value of
MAXCLSYSPRI
must be 40 or greater,
because the kernel assumes it has a least that great a range
of priorities below MAXCLSYSPRI.
If you request a MAXCLSYSPRI below 40,
the system will panic during initialization.

The most important system processes get global priorities at or near
MAXCLSYSPRI;
the least important system processes get global priorities
at or near (MAXCLSYSPRI - 40).
The default value of MAXCLSYSPRI is 99,
which gives all system processes higher priorities than all user processes.
% NCALL
Size of the private reserve of callout table entries.
The callout mechanism is used by device drivers and by the core kernel
to perform periodic tasks, to detect timeouts, and so forth;
each callout table entry represents a timed event scheduled
for later execution by the kernel's clock handler.
Entries are generally allocated dynamically, and the private reserve
exists as a fallback to be used when dynamic allocation is impossible.
%% XENIX Parameters
%C XENIX Parameters
These parameters are associated with the XENIX processing.
% NSCRN
Number of multi-screens for XENIX support.

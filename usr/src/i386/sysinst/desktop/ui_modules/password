#!/sbin/sh
#ident "@(#)password	15.1	97/12/19"

# password -- ISL UI module: user enters root password

. /isl/ui_modules/password.rc

#
# Should we skip the user interaction?
#
function skip_func
{
[ -n "$debug" ] && set -x
        # If the user has previously entered good values, then password_len
        # will be set
        password_len="`ivar get password_len`"
        if [ -z "$password_len" ]
        then
		#
                # Call ourselves again, interactively.
                #
                ivar set silent_password "false"
                ivar set skip_password "false"
		. /isl/ui_map
                exec $module_path/$module $direction
        fi
}


# maximum length of box
box_max=40+$len_max-8

#
# Create the winxksh form containing the password: textfield prompt.
#
function get_password
{
[ -n "$debug" ] && set -x
	open_form -exit exit_check
	form=$FID
	(( ix = 2 + ${#Repeat_Password} + 2 ))
	add_field password -novisible -p "$Password" -ilen $len_max \
		-px 3 -py 2 -ix $ix -iy 2 \
		-entry 'msgnoerr "$PASSWORD_PROMPT"' \
		-exit check_password
	(( password_fldnum=FIELDCNT-1 ))
	add_field confirm -novisible -p "$Repeat_Password" -ilen $len_max \
		-px 3 -py 4 -ix $ix -iy 4 \
		-entry 'msg "$REPEAT_PW_PROMPT"' \
		-exit check_match
	(( confirm_fldnum=FIELDCNT-1 ))
	place_window $box_max 7  -title "$PASSWORD_TITLE"
	run_form $form
	footer "$PASSWORD_KEYS"
	set_hotkey  9 "check_match; save_exit PREV"
	set_hotkey  1 "check_match; save_exit HELP"
}

function exit_check {
	
	[ -n "$debug" ] && set -x

	[ -z "$confirm_ok" ] && {
		msgnoerr "$PASSWORD_NO_MATCH"
		return 1 
	}

	return 0
}	

function save_exit
{
[ -n "$debug" ] && set -x
	#
	# ifile variable ROOT_PW_ENCRYPTED is used in
	# work/pkg/base/ifiles/postreboot.sh function GetRoot_Passwd
	#
	ivar set help_topic password	# Just in case $1 == HELP
	if [ -n "$confirm_ok" ]
	then
		ivar set ROOT_PW_ENCRYPTED "$encrypted"
		ivar set password_len "${#password}"
	else
		ivar set ROOT_PW_ENCRYPTED "$ROOT_PW_ENCRYPTED"
		ivar set password_len "$password_len"
	fi
	ii_exit $1
}


function main
{
[ -n "$debug" ] && set -x
#
# Get the initial password, if any.
#

# When the user enters a password, we show a * for each character entered.
# When the user enters a password and confirms it,
# and then hits F1, F9 or F10 to leave the screen,
# the password is stored encrypted (13 chars), not raw as the user entered it.
# We store the length of the raw password.
# 
# When the user later returns to this screen,
# we do not have the original text of the password as entered.
# To make the screen LOOK the way the user last saw it,
# we preload the fields with dummy strings of the
# length retrieved from the ifile.
# The check_password and check_match functions (in password.rc)
# do not perform any checking on dummy strings.
# Only when the user enters a new password do the check_ functions 
# validate the fields.
#
# The check_ functions are invoked as -exit handlers when the user
# tries to Tab out of a field.
# They are also invoked from the save_exit function which is triggered
# by F1, F9 and F10.  It would be nice if F-keys not only flushed each
# field value to the associated variable, but also invoked the -exit handler
# for each field.  Oh, well.

password_len="`ivar get password_len`"
ROOT_PW_ENCRYPTED=`ivar get ROOT_PW_ENCRYPTED`
confirm=
password=
fake_password=x
confirm_ok=yes
[ -n "$password_len" ] && {		
	# user has previously entered good values for both fields.
	i=0
	while (( ( i += 1 ) <= password_len ))
	do 
		password=$password"x"
	done
	fake_password=$password
	confirm=$password
	encrypted="$ROOT_PW_ENCRYPTED"
	confirm_ok=yes
}

#
# Let the user enter a password.
#
get_password
input_handler
ROOT_PW_ENCRYPTED="$encrypted"
password_len="${#password}"
save_exit NEXT
}

#
# Main
#

. /isl/ui_modules/common.rc

main

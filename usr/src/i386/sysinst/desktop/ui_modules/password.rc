# This file contains 2 winxksh functions:  check_password and check_match.
# They are used by the UI modules: password and owner.


#ident	"@(#)password.rc	15.1	98/03/04"

# maximum length of a password.
len_max=16

#
# Check the validity of $password.
#
# If     ok, return 0, allowing exit from the entry form.
# If not ok, return 1, denying  exit from the entry form.
#
function check_password
{
[ -n "$debug" ] && set -x
	if (( FLD_CHANGED == 1 ))
	then
		fld_change $form $confirm_fldnum ""
		confirm_ok=
	fi
	set +x
	[ "$fake_password" != "$password" ] && {
		[ -n "$debug" ] && set -x
		password_ok=
#		[ "$password" = "" ] && return 1
#		len=${#password}
#		(( len < 3 || len > $len_max )) && {
#			msg "$Error_PW_Short"
#			return 1
#		}
#		ok=0
#		case "$password" in
#		*[A-Za-z]*[A-Za-z]*)		# must at least have 2 alpha chars
#			case $password in
#			*[\ -@\[-\`{-~]*)		# and at least 1 "special" char
#				ok=1
#			esac
#		esac
#		[ $ok = 0 ] && {
#			msg "$Error_PW_Char"
#			return 1
#		}
		msg "$REPEAT_PW_PROMPT"
	}
	[ -n "$debug" ] && set -x
	msg
	password_ok=yes
	return 0
}

# Checks that $password matches $confirm.
#
function check_match
{
	[ "$fake_password" = "$confirm" ] && {
		[ -n "$debug" ] && set -x
		confirm_ok=yes
		return 0
	}
	[ -n "$debug" ] && set -x
	confirm_ok=
#	[ "$confirm" = "" ] && return 0
	set +x
	[ "$confirm" != "$password" ] && {
		[ -n "$debug" ] && set -x
#		[ 0 = $# ] && fld_change $form $confirm_fldnum ""
#		[ 0 = $# ] && fld_change $form $password_fldnum ""
		errmsg "$PASSWORD_NO_MATCH"
		return 0 
		# Even if the user did not correctly re-enter a password,
		# we do not return 1 (fail) because we do not want the
		# user to be stuck on the "Repeat Password" entry field.
		# We want the cursor to move on
		# (and thus circle back to the "Enter Password" field)
		# to repeat both the initial entry and the confirmation.
	}
	[ -n "$debug" ] && set -x
	msg
	confirm_ok=yes
	set +x
	encrypted=$(/isl/ui_modules/encrypt_str "$password")
	[ -n "$debug" ] && set -x
	return 0
}

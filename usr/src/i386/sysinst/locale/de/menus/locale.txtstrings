#ident "@(#)locale.txtstrings	11.2	97/10/14"
#
# Menu choices for locale UI module

# Note:  the commented-out assignments in this file were used to
# present a second prompt on the 'locale' screen which asked
# if the user wanted to install other locales.
# When the design is confirmed to not need this prompt,
# the commented-out assignments can be removed,
# as well as the corresponding code in the 'locale' module.

#prompt="Choose a locale for this system and press <Enter>.
#
#Then choose to install related locales or all locales, and press <Enter>.
#
#When done, press <F10> to continue to the next screen."

#message1="Use arrow keys to select a locale for this system, and press <Enter>."
#message2="Use arrow keys to choose the locales to install, and press <Enter>."

prompt=" Choose a locale for this system and press <F10>. "

current_is="Selected locale"

#item1="Install related locales."
#item2="Install all locales."

keys="<F1>=Help     <F9>=Back      <F10>=Next     Arrow keys or <Tab>=Select"

# According to Donald Peach in the UK, /usr/lib/keyboard contains
# a subdirectory for supported codeset, and the keyboard files are
# sorted into those.  For example,
#		/usr/lib/keyboard/737/GR      Greek
#		/usr/lib/keyboard/850/BE      Belgian
#			...
#		/usr/lib/keyboard/852/SK      Slovakian
#			...
#		/usr/lib/keyboard/857/TR-F    Turkish F Type
#		/usr/lib/keyboard/866/RU      Russian
#		/usr/lib/keyboard/C/A01       Japanese A01
#		/usr/lib/keyboard/C/AX        Japanese AX
#		/usr/lib/keyboard/C/US        American
#
# Each locale corresponds to a single codeset.
# So, the locale determines the subset of keyboards that the ISL
# presents on the keyboard selection screen.
#
# Each locale[] entry is <locale>:<codeset>:<locale label>
#
# It would be nice to automatically generate these entries
# by perhaps examining the directory structure of the build tree
# and/or files within it.  On 5/7/97 this directory structure
# is not yet in place in the tree.
#
n=-1
locale[((n+=1))]="C::English Default"
locale[((n+=1))]="POSIX::POSIX English"
locale[((n+=1))]="ja_JP::Japanese for Japan"
locale[((n+=1))]="ko_KR::Korean for Korea"
locale[((n+=1))]="da_DK:850:Danish for Denmark"
locale[((n+=1))]="de_AT:850:German for Austria"
locale[((n+=1))]="de_CH:850:German for Switzerland"
locale[((n+=1))]="de_DE:850:German for Germany"
locale[((n+=1))]="en_AU:850:English for Australia"
locale[((n+=1))]="en_CA:850:English for Canada"
locale[((n+=1))]="en_GB:850:English for Great Britain"
locale[((n+=1))]="en_HK:850:English for Hong Kong"
locale[((n+=1))]="en_IN:850:English for India"
locale[((n+=1))]="en_IR:850:English for Ireland"
locale[((n+=1))]="en_NZ:850:English for New Zealand"
locale[((n+=1))]="en_SG:850:English for Singapore"
locale[((n+=1))]="en_US:850:English for USA"
locale[((n+=1))]="es_AR:850:Spanish for Argentina"
locale[((n+=1))]="es_CL:850:Spanish for Chile"
locale[((n+=1))]="es_ES:850:Spanish for Spain"
locale[((n+=1))]="es_MX:850:Spanish for Mexico"
locale[((n+=1))]="es_VE:850:Spanish for Venezuela"
locale[((n+=1))]="fi_FI:850:Finnish for Finland"
locale[((n+=1))]="fr_BE:850:French for Belgium"
locale[((n+=1))]="fr_CA:850:French for Canada"
locale[((n+=1))]="fr_CH:850:French for Switzerland"
locale[((n+=1))]="fr_FR:850:French for France"
locale[((n+=1))]="is_IS:850:Icelandic for Iceland"
locale[((n+=1))]="it_CH:850:Italian for Switzerland"
locale[((n+=1))]="it_IT:850:Italian for Italy"
locale[((n+=1))]="nl_BE:850:Dutch for Belgium"
locale[((n+=1))]="nl_NL:850:Dutch for Netherlands"
locale[((n+=1))]="no_NO:850:Norwegian for Norway"
locale[((n+=1))]="pt_BR:850:Portuguese for Brazil"
locale[((n+=1))]="pt_PT:850:Portuguese for Portugal"
locale[((n+=1))]="sv_FI:850:Swedish for Finland"
locale[((n+=1))]="sv_SE:850:Swedish for Sweden"

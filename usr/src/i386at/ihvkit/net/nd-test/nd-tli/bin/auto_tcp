#test suite for SPX/TCP

progstr=`basename $0`

if [ "$progstr" = "auto_tcp" ]
then
	SUITE=nd-tcp
	PROFILE=$SUITE/tcp_profile
elif [ "$progstr" = "auto_spx" ]
then
	SUITE=nd-spx
	PROFILE=$SUITE/spx_profile
fi
CONFIG_FILE=$SUITE.cfg
LOCK_FILE=$SUITE/bin/tet_lock

if [ $# -lt 1 ]
then
	echo "USAGE: $0 <scenario name> "
	exit 1
fi
SCEN_NAME=$1
GUI=0
DISPCMD=echo
echo "Auto setup for $SUITE tests started..."
if  [ $# -gt 1 ]
then
	if [ $2 = "GUI=YES" ]
	then
		DISPCMD=gui_notice.wksh
	fi
fi

if [ -r $HOME/$PROFILE -a -r $HOME/$CONFIG_FILE ]
then
	:
else
	$DISPCMD "$0: ERROR:file '$PROFILE' or '$CONFIG_FILE' missing"
	exit 1
fi

. $HOME/$PROFILE
. $HOME/$CONFIG_FILE

# Test and remote machine(s) need to be in init state 3 to run tests suites
TEST_MACHINE=`uname -n`
echo "Checking init state $TEST_MACHINE...."

runlevel=`who -r | awk '{ print $3 }'`
if [ $runlevel != 3 ] 
then 
	$DISPCMD "ERROR: $TEST_MACHINE must be in init state 3 to run $SUITE test suites
	$TEST_MACHINE current init state> $runlevel 
	To change state type init 3 at command line as root" 
	exit 1
else
 	echo "$TEST_MACHINE Init State:  <$runlevel>"
fi


echo "Checking init state $NODE1...."

ping $NODE1
if [ $? != 0 ] 
then
	$DISPCMD "ERROR: ping to $NODE1 failed!
	Check that $NODE1 is in init state 3 by
        typing "who -r"  on $NODE1"
	exit 1
else
 	rsh -n -l $USER $NODE1 "who -r " > run
	node0_state=`grep run-level run |awk '{ print $3 }'` 
 	echo "$NODE1 Init State: <$node0_state>"
fi

if [ "${TET_SUITE_ROOT}" -a "$USER" ]
then
	:
else
	$DISPCMD "$0: ERROR:environmental variable TET_SUITE_ROOT and/or USER not set. Please have \nthese variables set and run the tests again."
	exit 1
fi

CONFIG_ERROR="NOTE: The tests should be configured before they can be executed. \nPlease have the tests configured either by updating the configuration file \n'$CONFIG_FILE' or using GUI."

if [ ! "$NODECOUNT" ]
then
	$DISPCMD "ERROR: variable NODECOUNT not set."
	$DISPCMD "$CONFIG_ERROR"
fi
if [ ! "$STRESS_TIME" ]
then
	$DISPCMD "ERROR: variable STRESS_TIME not set."
	$DISPCMD "$CONFIG_ERROR"
fi

>rhosts
cnt=0
while [ $cnt -lt $NODECOUNT ]
do
	node=`eval echo \\$NODE$cnt`
	if [ ! "$node" ]
	then
	 	$DISPCMD "ERROR: Variable NODE$cnt not set."
		$DISPCMD "$CONFIG_ERROR"
		exit 1
	fi
	eval echo \$NODE$cnt  $USER >>rhosts
	cnt=`expr $cnt + 1`
done

#make sure that the tests are not already running and there no locks left

#tmpstr=`ps -ef|grep datarecv|grep -v grep 2>/dev/null`
#if [ "$tmpstr" ]
#then
#	$DISPCMD "ERROR: The tests are already running on '$NODE0'. Please kill the tests, remove the locks and restart the tests."
#	exit 1
#fi

if [ -f ${LOCK_FILE} ]
then
	$DISPCMD "ERROR: Lock file encountered on '$NODE0'. The tests may be running or may have been terminated abnormally. Please clean up the processes, remove the locks and restart the tests."
	exit 1
fi

cnt=1
while [ $cnt -lt $NODECOUNT ]
do
	node=`eval echo \\$NODE$cnt`
	rcp rhosts $node:${TET_SUITE_ROOT}/.rhosts >/dev/null 2>&1
	if [ $? -ne 0 ]
	then
		$DISPCMD "ERROR: rcp to '$node' failed. Either the machine '$node' not responding or the entry '$NODE0' is not present in the '/etc/hosts.equiv' file of the machine '$node.'." 
		exit 1

	fi

#	tmpstr=`ps -ef|grep datasend|grep -v grep 2>/dev/null`
#	if [ "$tmpstr" ]
#	then
#		$DISPCMD "ERROR: The tests are already be running on '$node'. Please kill the tests, remove the locks and restart the tests."

#		exit 1
#	fi

	tmpstr=`rsh $node ls ${LOCK_FILE} 2>/dev/null`
	if [ "$tmpstr" ]
	then
		$DISPCMD "ERROR: Lock file encountered on '$node'. The tests may be running or may have been terminated abnormally. Please clean up the processes, remove the locks and restart the tests."
		exit 1
	fi

	# copy the tetexec.cfg file to all the remote machines
	rcp ${TET_SUITE_ROOT}/$SUITE/tetexec.cfg $node:${TET_SUITE_ROOT}/$SUITE/tetexec.cfg
	rsh  -n -l $USER $node ". $PROFILE;${TET_ROOT}/bin/tcc -e $SUITE datasend" >$node.log 2>&1 &
	echo
	echo "Listener started on machine $node..."
	sleep 1
	cnt=`expr $cnt + 1`
done
sleep 10

#start the receiver on local machine
${TET_ROOT}/bin/tcc -e $SUITE datarecv &

echo
echo "Test started on all machines ..."
sleep 10
TIME_OUT=$STRESS_TIME
# Give some extra time ( say 2 minutes) 
TIME_OUT=`expr $TIME_OUT + 2`
count=0
while [ $count -lt $TIME_OUT ]
do
	ps -ef|grep datarecv|grep -v grep >/dev/null 2>&1
	retsend=$?
	if [ $retsend -ne 0 ]
	then
		cnt=1
		while [ $cnt -lt $NODECOUNT ]
		do
			node=`eval echo \\$NODE$cnt`
			addr=`eval echo \\$ADDR$cnt`
			if [ $node = `uname -n` ]
			then
				cnt=`expr $cnt + 1`
				continue
			fi
			rsh  -n -l $USER $node "${TET_ROOT}/bin/kill_test datasend >/dev/null 2>&1" 
			cnt=`expr $cnt + 1`
		done
		echo
		$DISPCMD "$SUITE tests have been completed."
		exit	0
	fi
	count=`expr $count + 1`
	sleep 60
	echo ".\c"
done

$DISPCMD "\nWARNING: Timeout occured. Tests should have run for $STRESS_TIME minutes. More than $STRESS_TIME minutes have elapsed , but the tests have not completed. The processes on local and remote machines may have to be terminated manually."
exit 1

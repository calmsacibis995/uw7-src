#!/usr/bin/sh
#ident	"@(#)B2.job	1.2"

###########
##
##  This is a derivative of the Standard printer interface program
##  delivered w/ LP.  This printer interface provides for NCSC B2
##  level security markings (banner, trailer, headers and footers)
##  for all output.  Header and footer markings are dependent upon
##  the data stream to the printer consisting of simple output
##  (i.e. data with only printable characters and the common control
##  characters of backspace, horizontal tab, newline, carriage return,
##  and form-feed).  All other output is not labeled with headers
##  and footers but results in an audit record being generated.
##  /usr/lib/lp/bin/lp.pr is the paginater for header and footer
##  markings.
##
##  This interface is only certified B2 for the AT&T 57[0123] model
##  printers but has been written with the intent that it be usable
##  for other printer models.
##
###########

#####
#
#  In case we are in a SUM env.
#
#####
priv -allprivs max

#####
#
#  Until we get to the point below where the printer port
#  and physical printer are initialized, we can't do much
#  except exit.
#
#####
trap 'exit ${exit_code}' 0
trap 'exit_code=129 exit 129' 1
trap 'exit_code=129 exit 129' 2 3

cancel_flag=${CANCEL_FLAG:=0}
cancel_trap ()
{
	trap '' 15	#  Ignore further SIGTERMS
	cancel_flag=1
}
trap 'cancel_trap' 15

#####
#
#  Most of the time we don't want the standard error to be captured
#  by the Spooler, mainly to avoid "Terminated" messages that the
#  shell puts out when we get a SIGTERM. We'll save the standard
#  error channel under another number, so we can use it when it
#  should be captured.
#
#  Open another channel to the printer port, for use when the
#  regular standard output won't be directed there, such as in
#  command substitution (`cmd`).
#####
exec 5>&2 2>/dev/null 3>&1

truep ()
{
	if [ -n "$1" -a "$1" -eq 1 ]
	then
		return	0
	else
		return	1
	fi
}

falsep ()
{
	if [ -z "$1" -o "$1" -eq 0 ]
	then
		return	0
	else
		return	1
	fi
}
#####
#
#  Error message formatter:
#
#  Invoke as
#
#	errmsg severity message-number problem help
#
#  where severity is "ERROR" or "WARNING", message-number is
#  a unique identifier, problem is a short description of the
#  problem, and help is a short suggestion for fixing the problem.
#
#####

LP_ERR_LABEL="UX:lp"

E_IP_ARGS=1
E_IP_OPTS=2
#E_IP_FILTER=3
E_IP_STTY=4
E_IP_UNKNOWN=5
E_IP_BADFILE=6
E_IP_BADCHARSET=7
E_IP_BADCPI=8
E_IP_BADLPI=9
E_IP_BADWIDTH=10
E_IP_BADLENGTH=11
E_IP_ERRORS=12		# (in slow.filter)

errmsg ()
{
	#
	#  Arg 2 is ignored here.
	#
	case $1 in
	ERROR )
		sev="  ERROR";
		;;
	WARNING )
		sev="WARNING";
		;;
	esac
	echo "${LP_ERR_LABEL}: ${sev}: $3
        TO FIX: $4" >&5
}

#####
#
#  Set some globally used variables and functions.
#
#####

: ${TMPDIR:=/tmp}
: ${SPOOLDIR:=/usr/spool/lp}
: ${TERMINFO:=/usr/lib/terminfo}
: ${CHARSETDIR:=/usr/lib/charsets}
: ${LPBIN:=/usr/lib/lp/bin}

PATH="/bin:/usr/bin:${LPBIN}"

#####
#
#  Use ${TMPPREFIX} as the prefix for all temporary files, so
#  that cleanup is easy. The prefix may be up to 13 characters
#  long, so you only have space for one more character to make
#  a file name. If necessary, make a directory using this prefix
#  for better management of unique temporary file names.
#
#  Before exiting, set ${exit_code} to the value with which to exit.
#  Otherwise, the exit from this script will be 0.
#
#####
TMPPREFIX=${TMPDIR}/`uname -n`$$

trap 'rm -fr ${TMPPREFIX}*; exit ${exit_code}' 0

#####
#
#  ${LPTELL} is the name of a program that will send its
#  standard input to the Spooler. It is used to forward
#  the description of a printer fault to the Spooler,
#  which uses it in an alert to the administrator.
#
#####
if [ ! -x "${LPTELL:=${LPBIN}/lp.tell}" ]
then
	fake_lptell ()
	{
		header="no"
		while read line
		do
			if [ "no" = "${header}" ]
			then
				errmsg ERROR ${E_IP_UNKNOWN} \
		"unknown printer/interface failure" \
		"consult your system administrator;
		reasons for failure (if any) follow:"
				header=yes
			fi
			echo "${line}" >&2
		done
		return 1
	}
	LPTELL=fake_lptell
fi

	#####
	#
	#  Now that LPTELL is defined lets do something useful
	#  with it. We can be clever about getting a hangup or interrupt,
	#  though, at least until the filter runs.
	#
	#####

	catch_hangup ()
	{
		echo \
		"The connection to the printer dropped;" \
		"perhaps the printer went off-line?" \
			| ${LPTELL} ${printer}
		return 0
	}
	trap 'catch_hangup; exit_code=129 exit 129' 1

	catch_interrupt ()
	{
		echo \
	"Received an interrupt from the printer.  The reason is unknown,
	although a common cause is that the baud rate is too high." \
			| ${LPTELL} ${printer}
		return 0
	}
	trap 'catch_interrupt; exit_code=129 exit 129' 2 3

#####
#
#  ${DRAIN} is the name of a program that will wait
#  long enough for data sent to the printer to print.
#
#####
if [ -x "${LPBIN}/drain.output" ]
then
	DRAIN="${LPBIN}/drain.output 5"	# wait only five seconds
else
	DRAIN=
fi

#####
#
#  ${LPCAT} is the name of a program to use as a default
#  filter. Minimally it should copy its standard input to
#  the standard output, but it should also trap printer
#  faults. The current LPCAT traps hangups (DCD dropping, SIGHUP),
#  interrupts (SIGINT, SIGQUIT), broken pipe (SIGPIPE), and
#  excess delays in sending data to the printer, interpreting all
#  as printer faults.
#
#####
if [ ! -x "${LPCAT:=${LPBIN}/lp.cat}" ]
then
	LPCAT="cat"
fi

#####
#
#  $(LPLVLPROC} is the name of a program that provides the MAC-level
#  of the current process (us) for labeling the banner and trailer pages.
#
#####
if [ ! -x "${LPLVLPROC:=${LPBIN}/lp.lvlproc}" ]
then
	echo "Cannot find \`\`lp.lvlproc''." | ${LPTELL} ${printer}
	return 0
fi

#####
#
#  $(LPPR} is the name of a program that paginates the
#  output to have unalias MAC-level markings in the
#  first and last line of each page.
#
#####
if [ ! -x "${LPPR:=${LPBIN}/lp.pr}" ]
then
	echo "Cannot find \`\`lp.pr''." | ${LPTELL} ${printer}
	return 0
fi
_LPPR="$LPPR"
#####
#
#  ${LPSET} is the name of a program that will set the
#  character pitch, line pitch, page width, page length,
#  and character set. It helps to have this in a single
#  binary program so that (1) it's faster than calls
#  to "tput"; and (2) it can access the new Terminfo
#  capabilities for printers (on pre SVR3.2 machines, tput can't).
#
#####
if [ ! -x "${LPSET:=${LPBIN}/lp.set}" ]
then
	fake_lpset () {
		echo H V W L S >&2
		false
	}
	LPSET=fake_lpset
fi

internal_lpset () {
	#####
	#
	#  The funny business with the "2>&1 1>&3" is to let us capture
	#  the standard ERROR, not the standard OUTPUT as is the usual case
	#  with foo=`cmd`. The standard output will go to the printer.
	#
	#####
	[ -n "${stty1}" ] && stty ${stty1} 0<&1
	chk=`${LPSET} "$1" "$2" "$3" "$4" "$5" 2>&1 1>&3`
	[ -n "${stty2}" ] && stty ${stty2} 0<&1

	#####
	#
	#  The standard error of the delivered ${LPSET} program
	#  is a string of letters, H, V, W, L, S, which correspond
	#  to cpi, lpi, width, length, and character set. A letter
	#  is present only if the corresponding attribute could not
	#  be set.
	#
	#####
	for err in ${chk}
	do
		case ${err} in
		H )
			errmsg WARNING ${E_IP_BADCPI} \
		"can't select the character pitch \"${cpi}\"" \
		"check the valid pitches for the printer,
		or consult your system administrator;
		printing continues"
			;;
		V )
			errmsg WARNING ${E_IP_BADLPI} \
		"can't select the line pitch \"${lpi}\"" \
		"check the valid pitches for the printer,
		or consult your system administrator;
		printing continues"
			;;
		W )
			width=${cols}
			errmsg WARNING ${E_IP_BADWIDTH} \
		"can't select the page width \"${width}\"" \
		"check the valid widths for the printer,
		or consult your system administrator;
		printing continues"
			;;
		L )
			length=${lines}
			errmsg WARNING ${E_IP_BADLENGTH} \
		"can't select the page length \"${length}\"" \
		"check the valid lengths for the printer,
		or consult your system administrator;
		printing continues"
			;;
		S )
			errmsg WARNING ${E_IP_BADCHARSET} \
		"can't select the character set \"${CHARSET}\"" \
		"check the name given in the -S option,
		or consult your system administrator;
		printing continues"
			;;
		esac
	done
}

#####
#
#  ${TPUT} is "tput" IF it works. We'll disable it if we get an
#  ugly error message the first time we use it. See the TERM variable
#  later in the script.
#
#  NOTE: The check we use to see if "tput" works is to use an OLD
#  Terminfo capability, like "lines". If it works with that it may
#  still fail with some of the newer capabilities like "init" (SVR3.0)
#  or "swidm" (SVR3.2), because the version of "tput" we have on your
#  machine is older. Thus, on some of the code where ${TPUT} is used
#  you'll see "2>/dev/null" being used to avoid ugly error messages.
#
#  We're confident that most printers don't have backslashes
#  in the control sequences for carriage return and form-feed.
#  We're also confident that these don't contain newlines.
#  We're also confident that most printers have a linefeed
#  in the control sequence for doing a newline (move to beginning
#  of next line), but we can't capture it like we do the
#  carriage return or form-feed. Thus we set it unconditionally.
#  We don't set form-feed if it isn't defined, however, because
#  maybe the printer doesn't have a formfeed. If not set, we're
#  out of luck.
#
#  Additional ``parameters'' are passed via Shell environment
#  variables:
#
#	TERM	The printer type (used for Terminfo access)
#  		Set defaults for unset variables.
#####

: ${TERM:=unknown}
: ${CHARSET:=cs0}

TPUT=tput
tput lines 1>/dev/null 2>&1 || TPUT=:

CR=`${TPUT} cr`
[ -z "${CR}" ] && CR="\r"

FF=`${TPUT} ff`

NL="${CR}\n"

lines=`${TPUT} lines`
[ -z "${lines}" -o 0 -ge "${lines}" ] && lines=66

cols=`${TPUT} cols`
[ -z "${cols}" -o 0 -ge "${cols}" ] && cols=132

if BOLD=`${TPUT} bold` && SGR0=`${TPUT} sgr0`
then
	ENHANCE="-E '$BOLD' -E '$SGR0'"
else
	#
	#  Built in label enhancements:
	#
	#  	'-E cr' or '-E bs'
	#
	ENHANCE="-E cr"
fi
LPPR="${LPPR} -l $lines -w $cols $ENHANCE"


###########
#
#  Check arguments
#
###########

parse ()
{
	echo "`expr \"$1\" : \"^[^=]*=\(.*\)\"`"
}

#####
#
#  This program is invoked as:
#
#  /etc/lp/interfaces/printer request-id user title copies options files...
#
#  The first three arguments are simply reprinted on the banner page,
#  the fourth (copies) is used to control the number of copies to print,
#  the fifth (options) is a blank separated list (in a single argument)
#  of user or Spooler supplied options (without the -o prefix),
#  and the last arguments are the files to print.
#
#####

if [ $# -lt 5 ]
then
	errmsg ERROR ${E_IP_ARGS} \
		"wrong number of arguments to interface program" \
		"consult your system administrator"
	exit 129
fi

printer=`basename $0`
request_id=$1
user_name=$2
title=$3
copies=$4
option_list=$5

shift 5
files="$*"

paginate=1

nobanner="no"
nolabels="no"
nofilebreak="no"
stty=

inlist=
for i in ${option_list}
do
	case "${inlist}${i}" in

	nolabels)
		nolabels="yes"
		paginate=0
		;;

	#
	#  This should not happen.  All printers defined w/ this
	#  interface should also be defined w/ banner=on:Always.
	#  But just in case we will ignore any request to turn it
	#  off.
	#
	nobanner )
		nobanner="no"
		;;

	nofilebreak )
		nofilebreak="yes"
		;;
	#####
	#
	#  If you want to add simple options (e.g. -o simple)
	#  identify them here.
	#
	#####
#	simple )
#		simple="yes"
#		;;

	#
	#  The following options can cause some trouble to the
	#  paginater.  So, instead of leaving this to chance
	#  we allow the option, to give the user what they want,
	#  but assume an implicit 'nolabels'.
	#

	cpi=pica )
		cpi=10
		nolabels="yes"
		paginate=0
		;;
	cpi=elite )
		cpi=12
		nolabels="yes"
		paginate=0
		;;
	cpi=* )
		cpi=`parse ${i}`
		nolabels="yes"
		paginate=0
		;;

	lpi=* )
		lpi=`parse ${i}`
		nolabels="yes"
		paginate=0
		;;

	length=* )
		length=`parse ${i}`
		nolabels="yes"
		paginate=0
		;;

	width=* )
		width=`parse ${i}`
		nolabels="yes"
		paginate=0
		;;

	#####
	#
	#  If you want to add simple-value options (e.g. -o value=a)
	#  identify them here.
	#
	#####
#	value=* )
#		value=`parse ${i}`
#		nolabels="yes"
#		paginate=0
#		;;


	#####
	#
	#  STTY options may be specified but are disallowed.
	#
	#####
	#
	#  If you want to add options that, like "stty",
	#  take a list (e.g. -o lopt='a b c'), identify
	#  them here and below (look for LOPT).
	#
	#####
#	stty=* | flist=* | lpd=* )
#LOPT	stty=* | flist=* | lpd=* | lopt=* )
#
#		inlist=`expr "${inlist}${i}" : "^\([^=]*=\)"`
#		case "${i}" in
#		${inlist}\'*\' )
#			item=`expr "${i}" : "^[^=]*='*\(.*\)'\$"`
#			;;
#		${inlist}\' )
#			continue
#			;;
#		${inlist}\'* )
#			item=`expr "${i}" : "^[^=]*='*\(.*\)\$"`
#			;;
#		${inlist}* )
#			item=`expr "${i}" : "^[^=]*=\(.*\)\$"`
#			;;
#		*\' )
#			item=`expr "${i}" : "^\(.*\)'\$"`
#			;;
#		* )
#			item="${i}"
#			;;
#		esac
#
#		#####
#		#
#		#  We don't dare use "eval" because a clever user could
#		#  put something in an option value that we'd end up
#		#  exec'ing.
#		#
#		#####
#		case "${inlist}" in
#		stty= )
#			stty="${stty} ${item}"
#			;;
#		flist= )
#			flist="${flist} ${item}"
#			;;
#		lpd= )
#			lpd="${lpd} ${item}"
#			;;
#LOPT		lopt= )
#LOPT			lopt="${lopt} ${item}"
#LOPT			;;
#		esac
#
#		case "${i}" in
#		${inlist}\'*\' )
#			inlist=
#			;;
#		${inlist}\'* )
#			;;
#		*\' | ${inlist}* )
#			inlist=
#			;;
#		esac
#		;;

	* )
		errmsg WARNING ${E_IP_OPTS} \
			"unrecognized \"-o ${i}\" option" \
			"check the option, resubmit if necessary
		printing continues"
		;;
	esac
done

#####
#
#  Additional ``parameters'' are passed via Shell environment
#  variables:
#
#	FILTER	The filter to run
#
#  Set defaults for unset variables.
#
#####
if [ -z "$BANNER_KEY" -o -z "$JOB_SEQ_NO" -o -z "$B2_CONTROL" ]
then
	errmsg ERROR ${E_IP_ARGS} \
		"Missing critical environment variables." \
		"Consult your system administrator."
	exit 129
fi
if [ -z "${FILTER}" ]
then
	#####
	#
	# If no filter is being used, we have a little routine that
	# will push the data to the printer. It traps hangups (loss
	# of carrier) and checks for excessive delays in sending the
	# data to the printer. The lesser of the print rate of the printer
	# (obtained from Terminfo) or the baud rate is used to compute
	# the expected delay. If neither of these is correct, you
	# may be experiencing false alarms. If so, give the correct
	# rate, in characters per second, as a single argument.
	# An argument of 0 means don't check for delays.
	# Give an -r option to get a printout of actual delays.
	# (QUOTES ARE IMPORTANT!)
	#####
	# FILTER="${LPCAT} 120"			# e.g. 120 CPS
	# FILTER="${LPCAT} -r 0 2>/tmp/delays"	# check actual delays
	# FILTER=${LPCAT}

	if [ $nolabels = yes ]
	then
		# allow infinite delays
		FILTER="${LPCAT} 0"
	else
		# allow infinite delays
		FILTER="${LPPR} ${request_id} | ${LPCAT} 0"
	fi
else
	#####
	#
	#  If filter is defined then we cannot add our paginating
	#  filter - it could really screw things up.  So, we default
	#  to a 'nolabels' condition.
	#
	#####
	paginate=0
fi

###########
#
#  Initialize the printer port
#
###########

#####
#
#  SERIAL PORTS:
#  Initialize everything.
#
#  PARALLEL PORTS:
#  Don't initialize baud rate.
#
#  It's not obvious how to tell if a port is parallel or serial.
#  However, by splitting the initialization into two steps and letting
#  the serial-only part fail nicely, it'll work.
#
#  Another point: The output must be a ``tty'' device. If not, don't
#  bother with any of this.
#
#####
stty1= stty2=
tty 0<&1 1>/dev/null 2>&1 && {

	#####
	#
	#  First set the default parameters,
	#  then the requested parameters.
	#
	#####

	stty \
		9600 \
			0<&1 2>/dev/null 1>&2
	stty \
		cs8 -cstopb -parenb -parodd \
		ixon -ixany \
		opost -olcuc onlcr -ocrnl -onocr -onlret -ofill \
		nl0 cr0 tab0 bs0 vt0 ff0 \
		start ^Q stop ^S intr ^? \
			0<&1 2>/dev/null 1>&2

#	if [ -n "${stty}" ]
#	then
#		if stty ${stty} 0<&1 1>/dev/null 2>&5
#		then
#			:
#		else
#			errmsg ERROR ${E_IP_STTY} \
#				"stty option list failed" \
#				"check the \"-o stty\" option you used,
#		or consult your system administrator"
#			exit 1
#		fi
#	fi

	#####
	#
	#  Here you may want to add other port initialization code.
	#  Some examples:
	#
	#  estty  # for printer needing hardware flow control (3B2/EPORTS)
	#  fctty  # for printer needing hardware flow control (3B15,3B20)
	#
	#####
	#estty 0<&1
	#fctty 0<&1


	##########
	#
	#  Find out if we have to turn off opost before initializing the
	#  printer and on after. Likewise, check clocal.
	#
	#  Turning OFF opost (output postprocessing) keeps the UNIX system
	#  from changing what we try to send to the printer. Turning ON
	#  clocal keeps the UNIX system from dropping what we are trying to
	#  send if the printer drops DTR. An example of the former is the
	#  AT&T 479, which wants to send a linefeed (ASCII 10) when a page
	#  width of 10 is set; with opost on, this COULD BE turned into a
	#  carriage-return/linefeed pair. An example of the latter is the
	#  AT&T 455, which momentarily drops DTR when it gets the
	#  initialization string, is2; with clocal off, the UNIX system
	#  stops sending the rest of the initialization sequence at that
	#  point.
	#
	#  THIS CODE MUST FOLLOW THE REST OF THE PORT INITIALIZATION CODE.
	#
	##########
	cur_stty=`stty -a 0<&3`
	expr "${cur_stty}" : '.*-opost' 1>/dev/null 2>&1 \
		|| stty1="${stty1} -opost" stty2="${stty2} opost"
	expr "${cur_stty}" : '.*-clocal' 1>/dev/null 2>&1 \
		&& stty1="${stty1} clocal" stty2="${stty2} -clocal"
	expr "${cur_stty}" : '.* opost.*' 1>/dev/null 2>&1
}


###########
#
#  Initialize the physical printer (Part I).
#  Here we bring the printer to a sane state and set the page size.
#
###########

#####
#
#  Basic initialization. The ``else'' clause is equivalent,
#  but covers cases where old Terminal Information Utilities are present.
#
#
#  WARNING! The "echo" command will catch backslashes (\) and
#  try to interpret the characters following it. Thus, using
#  "echo" to print string values obtained from "tput" is dangerous.
#
#####
[ -n "${stty1}" ] && stty ${stty1} 0<&1
if ${TPUT} init 2>/dev/null
then
	:
else
	pgm=`${TPUT} iprog`	# initialization program
	if [ -x "${pgm}" ]
	then
		eval ${pgm}
	fi

	${TPUT} is1		# init string 1
	${TPUT} is2		# init string 2

	#
	#  The goal of all this tab setting is to ensure that tabs
	#  (expanded or not) result in a forward horizontal motion
	#  up to the next 8-space tab stop.  The theory here is that
	#  the user probably has tabs set to every 8-space (which is
	#  most common.  Of course 'stty2' (below) could screw this
	#  all up again.
	#
	tabset=
	if [ "8" != "`${TPUT} it`" ] # Tabs initially every # spaces
	then
		stty tab3 0<&1 1>/dev/null 2>&1 # expand tabs to spaces

	elif `${TPUT} ht >/dev/null` # tab to next 8-space hardware tab-stop
	then
		tabset="/usr/lib/tabset/${TERM}"
		if [ -r ${tabset} ]
		then
			cat -s ${tabset}
		fi
		stty tab3 0<&1 1>/dev/null 2>&1 # expand tabs to spaces
	fi

	file=`${TPUT} if`	# is there an initialization file.
	if [ "${tabset}" != "${file}" -a -r "${file}" ]
	then
		cat -s "${file}"
	fi

	${TPUT} is3
	echo "${CR}\c"
fi
[ -n "${stty2}" ] && stty ${stty2} 0<&1

#####
#
#  Set the page size and print spacing, but not the character set.
#  We will be doing the character set later (after the header).
#
#####
internal_lpset "${cpi}" "${lpi}" "${width}" "${length}" ""

#####
#
#  The cancel page will
#  use double width characters if they're available.
#
#####
WIDE_CS=`${TPUT} swidm 2>/dev/null`
NORM_CS=`${TPUT} rwidm 2>/dev/null`
PAD="#####${NL}"

cancel_page ()
{
	echo "${PAD}\c"
	echo "#####   ${WIDE_CS}Time: `date`${NORM_CS}${NL}\c"
	echo "${PAD}\c"
	echo "#####   ${WIDE_CS}Status:  Suspended or Canceled${NORM_CS}${NL}\c"
	echo "${PAD}\c"
}

#####
#
#  Now that the printer is ready for printing, we're able
#  to record on paper a cancellation.  We should always generate
#  a banner and trailer page so as not to confuse the printer
#  operator.  This could lead to deception.
#
#####

canceled ()
{
	${TPUT} scs 0 2>/dev/null
	if [ -n "${FF}" -a -z "$1" ]
	then
		echo "${CR}${FF}\c"
	fi
	cancel_page
	cancel_flag=1
	if [ -n "${FF}" ]
	then
		echo "${CR}${FF}\c"
	fi
}
if [ $cancel_flag -eq 1 ]
then
	eval canceled no_ff; exit_code=0 exit
fi
trap 'eval canceled; exit_code=0 exit' 15


###########
#
#  Initialize the physical printer (Part II)
#  Here we select the character set.
#  One could argue that this should be done before the banner is printed,
#  but we don't, to keep the banner page looking consistent for the
#  operator. You can move this code before the banner code if you
#  disagree. If you do, combine it with the other call to "internal_lpset"
#  to do everything in one shot.
#
###########
internal_lpset "" "" "" "" "${CHARSET}"

###########
#
#  Print some copies of the file(s)
#
###########

#####
#
#  The protocol between the interface program and the Spooler
#  is fairly simple:
#
#	All standard error output is assumed to indicate a
#	fault WITH THE REQUEST. The output is mailed to the
#	user who submitted the print request and the print
#	request is finished.
#
#	If the interface program sets a zero exit code,
#	it is assumed that the file printed correctly.
#	If the interface program sets a non-zero exit code
#	less than 128, it is assumed that the file did not
#	print correctly, and the user will be notified.
#	In either case the print request is finished.
#
#	If the interface program sets an exit code greater
#	than 128, it is assumed that the file did not print
#	because of a printer fault. If an alert isn't already
#	active (see below) one will be activated. (Exit code
#	128 should not be used at all. The shell, which executes
#	this program, turns SIGTERM, used to kill this program
#	for a cancellation or disabling, into exit 128. The
#	Spooler thus interpretes 128 as SIGTERM.)
#
#	A message sent to the standard input of the ${LPTELL}
#	program is assumed to describe a fault WITH THE PRINTER.
#	The output is used in an alert (if alerts are defined).
#	If the fault recovery is "wait" or "begin", the printer
#	is disabled (killing the interface program if need be),
#	and the print request is left on the queue.
#	If the fault recovery is "continue", the interface program
#	is allowed to wait for the printer fault to be cleared so
#	it can resume printing.
#
#  This interface program relies on filters to detect printer faults.
#  In absence of a filter provided by the customer, it uses a simple
#  filter (${LPCAT}) to detect the class of faults that cause DCD
#  (``carrier'') drop. The protocol between the interface program and
#  the filter:
#
#	The filter should exit with zero if printing was
#	successful and non-zero if printing failed because
#	of a printer fault. This interface program turns a
#	non-zero exit of the filter into an "exit 129" from
#	itself, thus telling the Spooler that a printer fault
#	(still) exists.
#
#	The filter should report printer faults via a message
#	to its standard error. This interface program takes all
#	standard error output from the filter and feeds it as
#	standard input to the ${LPTELL} program.
#
#	The filter should wait for a printer fault to clear,
#	and should resume printing when the fault clears.
#	Preferably it should resume at the top of the page
#	that was being printed when the fault occurred.
#	If it waits and finishes printing, it should exit
#	with a 0 exit code. If it can't wait, it should exit
#	with a non-zero exit code.
#
#	The interface program expects that ANY message on the
#	standard error from the filter indicates a printer fault.
#	Therefore, a filter should not put user (input) error
#	messages on the standard error, but on the standard output
#	(where the user can read them when he or she examines
#	the print-out).
#
#####

badfileyet=
i=1
while [ $i -le $copies ]
do
	for file in ${files}
	do

		if [ -r "${file}" ]
		then

			#####
			#
			#  Here's where we set up the $LPTELL program to
			#  capture fault messages, and...
			#
			#  Here's where we print the file.
			#
			#  We set up a pipeline to $LPTELL, but play a trick
			#  to get the filter's standard ERROR piped instead of
			#  its standard OUTPUT: Divert the standard error
			#  (#2) to the standard output (#1) IN THE PIPELINE.
			#  The shell will have changed #1 to be the pipe, not
			#  the printer, so diverting #2 connects it to the pipe.
			#  We then change the filter's #1 to a copy of the real
			#  standard output (the printer port) made earlier,
			#  so that is connected back to the printer again.
			#
			#  We do all this inside a parenthesized expression
			#  so that we can get the exit code; this is necessary
			#  because the exit code of a pipeline is the exit
			#  code of the right-most command, which isn't the
			#  filter.
			#
			#  These two tricks could be avoided by using a named
			#  pipe to connect the standard error to $LPTELL. In
			#  fact an early prototype of this script did just
			#  that; however, the named pipe introduced a timing
			#  problem. The processes that open a named pipe hang
			#  until both ends of the pipe are opened. Cancelling
			#  a request or disabling the printer often killed one
			#  of the processes, causing the other process to hang
			#  forever waiting for the other end of the pipe to
			#  be opened.
			#
			#####
			#
			#  If the paginate flag is set then LPPR is not in
			#  our filter pipeline so we call it directly to
			#  generate the audit record.  If audit record
			#  generation should fail for some reason other
			#  than ENOPKG then it will terminate w/ a non-zero
			#  exit code and we must stop and signal an alert.
			#
			#####
			if falsep $paginate
			then
				$_LPPR -A $request_id </dev/null >/dev/null 2>&1
				if [ $? -ne 0 ]
				then
					exit_code=129
					exit 129
				fi
			fi
			EXIT_CODE=${TMPPREFIX}e
			trap '' 1	# Let the filter handle a hangup
			trap '' 2 3	# and interrupts
			(
				#####
				#
				#  Put the 0<${file} before the "eval" to keep
				#  clever users from giving a file name that
				#  evaluates as something to execute.
				#
				#####
				0<${file} eval ${FILTER} 2>&1 1>&3
				echo $? >${EXIT_CODE}
			) | ${LPTELL} ${printer}
			trap 'catch_hangup; exit_code=129 exit 129' 1
			trap 'catch_interrupt; exit_code=129 exit 129' 2 3
			exit_code=`cat ${EXIT_CODE}`

			if [ -n "${exit_code}" -a 0 -ne "${exit_code}" ]
			then
				trap '' 15  # Avoid dying from disable
				sleep 4	    # Give $LPTELL a chance to tell
				exit_code=129 exit 129
			fi
			if [ -n "${FF}" -a "no" = "${nofilebreak}" ] \
				&& falsep $paginate
			then
				echo "${CR}${FF}\c"
			fi
		else

			#####
			#
			#  Don't complain about not being able to read
			#  a file on second and subsequent copies, unless
			#  we've not complained yet. This removes repeated
			#  messages about the same file yet reduces the
			#  chance that the user can remove a file and not
			#  know that we had trouble finding it.
			#
			#####
			if [ "${i}" -le 1 -o -z "${badfileyet}" ]
			then
				errmsg WARNING ${E_IP_BADFILE} \
				"cannot read file \"${file}\"" \
				"see if the file still exists and is readable,
		or consult your system administrator;
		printing continues"
				badfileyet=yes
			fi

		fi

	done
	i=`expr $i + 1`

done

if [ -n "${exit_code}" -a 0 -ne "${exit_code}" ]
then
	exit ${exit_code}
fi

${DRAIN}

exit_code=0 exit 0

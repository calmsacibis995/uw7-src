#ident	"@(#)OSRcmds:ksh/ksh.mk	1.1"
#	@(#) ksh.mk 26.2 95/07/21 
#
#	Copyright (C) The Santa Cruz Operation, 1990-1995
#		All Rights Reserved.
#	This Module contains Proprietary Information of
#	The Santa Cruz Operation, and should be treated as Confidential.
#

#
#  MODIFICATION HISTORY
#
#	L000		9 Nov 1992	scol!markhe
#	- adjusted makefile to work in SCO's enviroment, work includes:
#		o	don't generate sh_config.h every time, use the
#			pre-built one
#		o	sh_config.h moved into the include sub-directory
#		o	added spname.c for cd spell-checking
#		o	don't built suid_exec
#		o	dont' generate or use readonly - we have no way of
#			directing our compiler to place data into a text
#			section
#		o	install the shell in /bin using `cp', not `install'
#
#	L001		24 Nov 1992	scol!markhe
#	- mods for internationalised build
#
#	L002		8 Dec 1993	scol!gregw
#	- Added librpc.a and libsocket.a to link with real NIS routines.
#
#	L003		15 Mar 1994	scol!ianw
#	- Made AR, INS, STRIP and SIZE macros consistent with other utilities.
#
#	L004		20 Jul 1994	scol!ianw
#	- Removed -xpgplus from LIBS.
#
#	L005		29 Jul 1994	scol!ianw
#	- Replaced -lrpc -lsocket with $(NETLIB).
#
#	L006		 8 Aug 1994	scol!anthonys
#	- Create a POSIX conformant shell as /bin/posix/sh.

# makefile for ksh generated by mkold and hand modified
#########################################
# *** RDS makefile standards applied ***
#########################################

include $(CMDRULES)
include	../make.inc

INTL = -DINTL

# for RDS: set INSDIR = $(ROOT)/usr/lbin, else $(ROOT)/bin
INSDIR  = $(OSRDIR)
TESTDIR = .
# ETC     = $(OSRDIR)/etc

# CC     = $(ROOT)/bin/cc
# LD     = $(ROOT)/bin/ld
# RANLIB = $(ROOT)/bin/ranlib
# RDS: determine location of mcs
# MCS    = `if [ -x /bin/uts ]; then if /bin/uts; then echo "$(ROOT)/bin/mcs"; else echo "$(ROOT)/usr/bin/mcs"; fi; else echo "$(ROOT)/usr/bin/mcs"; fi`

XPGUTIL = 
# [debug] CFLAGS	= $(XPGUTIL) -g -I$(INC) -$(SYSINC) -DDBUG
# [debug] CFLAGS	= $(XPGUTIL) -g -I$(INC) -$(SYSINC)
# [debug] LIBS =
CFLAGS  = $(XPGUTIL) -O -I$(INC) -I$(SYSINC)
LIBS    = $(NETLIB) -lgen -lc

Ins   = $(TESTDIR)/install
Inc   = $(TESTDIR)/include
Sh    = $(TESTDIR)/sh
SHLIB = $(TESTDIR)/shlib

RDONLY  =
EXRDONLY= $(CC) -c
# RDONLY = ./readonly
# For RDS: SH=ksh SUID= , else SUID=suid_exec
SH     = ksh
SUID   = 

#all:	$(SH) $(SUID)
all:	$(SH)

$(SH):	$(Inc)/sh_config.h arith.o args.o builtin.o cmd.o ctype.o \
		defs.o edit.o echo.o error.o expand.o fault.o history.o \
		io.o jobs.o macro.o main.o msg.o name.o print.o service.o \
		spname.o string.o stak.o test.o word.o xec.o emacs.o vi.o \
		catload.o libsh.a
	$(CC) $(CFLAGS) -o $(TESTDIR)/$(SH) arith.o args.o builtin.o cmd.o \
		ctype.o defs.o edit.o echo.o error.o expand.o fault.o  \
		history.o io.o jobs.o macro.o main.o msg.o name.o print.o \
		service.o spname.o string.o stak.o test.o word.o xec.o \
		emacs.o vi.o catload.o libsh.a $(LIBS) $(LDFLAGS)
#	if	test -x $(MCS);\
#	then	$(MCS) -d $(SH)  2> /dev/null;\
#	fi

arith.o:	$(Sh)/arith.c $(Inc)/streval.h $(Inc)/sh_config.h \
		$(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h $(Inc)/ksh_msg.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/arith.c

args.o:	$(Sh)/args.c $(Inc)/builtins.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/args.c

builtin.o:	$(Sh)/builtin.c $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/builtins.h $(Inc)/history.h \
		$(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/builtin.c

cmd.o:	$(Sh)/cmd.c $(Inc)/test.h $(Inc)/builtins.h $(Inc)/history.h \
		$(Inc)/sym.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/cmd.c

ctype.o:	$(RDONLY) $(Sh)/ctype.c
	$(EXRDONLY) -I$(Inc) $(CFLAGS) -DKSHELL $(Sh)/ctype.c

defs.o:	$(Sh)/defs.c $(Inc)/timeout.h $(Inc)/edit.h $(Inc)/history.h \
		$(Inc)/sym.h $(Inc)/jobs.h $(Inc)/terminal.h \
		$(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/defs.c

edit.o:	$(Sh)/edit.c $(Inc)/edit.h $(Inc)/history.h $(Inc)/sym.h \
		$(Inc)/builtins.h $(Inc)/terminal.h $(Inc)/defs.h \
		$(Inc)/stak.h $(Inc)/shnodes.h $(Inc)/brkincr.h \
		$(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/edit.c

echo.o:	$(Sh)/echo.c $(Inc)/defs.h $(Inc)/stak.h $(Inc)/shnodes.h \
		$(Inc)/brkincr.h $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/echo.c

error.o:	$(Sh)/error.c $(Inc)/history.h $(Inc)/jobs.h \
		$(Inc)/terminal.h $(Inc)/defs.h $(Inc)/stak.h \
		$(Inc)/shnodes.h $(Inc)/brkincr.h $(Inc)/name.h \
		$(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/error.c

expand.o:	$(Sh)/expand.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/expand.c

fault.o:	$(Sh)/fault.c $(Inc)/timeout.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/fault.c

history.o:	$(Sh)/history.c $(Inc)/history.h $(Inc)/builtins.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/history.c

io.o:	$(Sh)/io.c $(Inc)/history.h $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/io.c

jobs.o:	$(Sh)/jobs.c $(Inc)/history.h $(Inc)/jobs.h $(Inc)/terminal.h \
		../include/osr.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/jobs.c

macro.o:	$(Sh)/macro.c $(Inc)/builtins.h $(Inc)/sym.h $(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/macro.c

main.o:	$(Sh)/main.c $(Inc)/builtins.h $(Inc)/timeout.h \
		$(Inc)/history.h $(Inc)/sym.h $(Inc)/jobs.h \
		$(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/main.c

msg.o:	$(RDONLY) $(Sh)/msg.c $(Inc)/history.h $(Inc)/timeout.h $(Inc)/test.h \
		$(Inc)/builtins.h $(Inc)/sym.h
	$(EXRDONLY) -I$(Inc) $(CFLAGS) -DKSHELL -DUW $(Sh)/msg.c

catload.o:	$(Sh)/catload.c $(Inc)/defs.h #(Inc)/msg.h
	$(CC)	-I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/catload.c

name.o:	$(Sh)/name.c $(Inc)/timeout.h $(Inc)/history.h \
		$(Inc)/builtins.h $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/name.c

print.o:	$(Sh)/print.c $(Inc)/builtins.h $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/print.c

service.o:	$(Sh)/service.c $(Inc)/history.h $(Inc)/builtins.h \
		$(Inc)/sym.h $(Inc)/jobs.h $(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/service.c

spname.o:	$(Sh)/spname.c ../include/osr.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/spname.c

string.o:	$(Sh)/string.c $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/string.c

stak.o:	$(Sh)/stak.c
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/stak.c

test.o:	$(Sh)/test.c $(Inc)/sym.h $(Inc)/test.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/test.c

word.o:	$(Sh)/word.c $(Inc)/test.h $(Inc)/builtins.h $(Inc)/sym.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/word.c

xec.o:	$(Sh)/xec.c $(Inc)/builtins.h $(Inc)/test.h $(Inc)/sym.h \
		$(Inc)/jobs.h $(Inc)/terminal.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/xec.c

emacs.o:	$(Sh)/emacs.c $(Inc)/edit.h $(Inc)/history.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/emacs.c

vi.o:	$(Sh)/vi.c $(Inc)/terminal.h $(Inc)/edit.h $(Inc)/history.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(Sh)/vi.c

libsh.a:	adjust.o assign.o assnum.o cannon.o chkid.o convert.o \
		findnod.o gettree.o strmatch.o growaray.o gsort.o \
		linknod.o namscan.o rjust.o strdata.o streval.o tilde.o \
		unassign.o utos.o valup.o optget.o
	$(AR) cr libsh.a adjust.o assign.o assnum.o cannon.o chkid.o \
		convert.o findnod.o gettree.o strmatch.o growaray.o gsort.o \
		linknod.o namscan.o rjust.o strdata.o streval.o tilde.o \
		unassign.o utos.o valup.o optget.o
#		if	test -x	 $(RANLIB);\
#		then	$(RANLIB) libsh.a > /dev/null 2>&1;\
#		fi

adjust.o:	$(SHLIB)/adjust.c $(Inc)/name.h $(Inc)/flags.h \
		$(Inc)/sh_config.h $(Inc)/ksh_msg.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/adjust.c

assign.o:	$(SHLIB)/assign.c $(Inc)/name.h $(Inc)/flags.h $\
		$(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/assign.c

assnum.o:	$(SHLIB)/assnum.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/assnum.c

cannon.o:	$(SHLIB)/cannon.c $(Inc)/sh_config.h $(Inc)/io.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/cannon.c

chkid.o:	$(SHLIB)/chkid.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/chkid.c

convert.o:	$(SHLIB)/convert.c
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/convert.c

findnod.o:	$(SHLIB)/findnod.c $(Inc)/name.h $(Inc)/flags.h \
		$(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/findnod.c

gettree.o:	$(SHLIB)/gettree.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/gettree.c

strmatch.o:	$(SHLIB)/strmatch.c
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/strmatch.c

growaray.o:	$(SHLIB)/growaray.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/growaray.c

gsort.o:	$(SHLIB)/gsort.c
	$(CC) -I$(Inc) $(CFLAGS) -c $(SHLIB)/gsort.c

linknod.o:	$(SHLIB)/linknod.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/linknod.c

namscan.o:	$(SHLIB)/namscan.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/namscan.c

rjust.o:	$(SHLIB)/rjust.c
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/rjust.c

strdata.o:	$(RDONLY) $(SHLIB)/strdata.c $(Inc)/streval.h $(Inc)/sh_config.h
	$(EXRDONLY) $(CFLAGS) -I$(Inc) -DKSHELL $(SHLIB)/strdata.c

streval.o:	$(SHLIB)/streval.c $(Inc)/streval.h $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/streval.c

tilde.o:	$(SHLIB)/tilde.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/tilde.c

unassign.o:	$(SHLIB)/unassign.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/unassign.c

utos.o:	$(SHLIB)/utos.c
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/utos.c

valup.o:	$(SHLIB)/valup.c $(Inc)/name.h $(Inc)/flags.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/valup.c

optget.o:	$(SHLIB)/optget.c $(Inc)/sh_config.h
	$(CC) -I$(Inc) $(CFLAGS) -DKSHELL -c $(SHLIB)/optget.c

$(Inc)/ksh_msg.h:	NLS/en/ksh.gen
	$(MKCATDEFS) ksh $? >/dev/null
	cat ksh_msg.h | sed 's/"ksh.cat@Unix"/"OSRksh.cat@Unix"/g' > $(Inc)/ksh_msg.h
	rm ksh_msg.h

#suid_exec:	suid_exec.o
#	$(CC) $(CFLAGS) -o $(TESTDIR)/suid_exec suid_exec.o
#
#suid_exec.o :	$(Sh)/suid_exec.c $(Inc)/sh_config.h
#	$(CC) -I$(Inc) $(CFLAGS) -c $(Sh)/suid_exec.c

clobber :	clean
		rm -f libsh.a core ksh a.out select.s
		$(DOCATS) -d NLS $@

clean :
	rm -f *.o $(Inc)/ksh_msg.h

install : all
	$(DOCATS) -d NLS $@
	$(INS) -f $(INSDIR) ksh

size: all
	$(SIZE)  $(TESTDIR)/$(SH) 
#	if test -x $(TESTDIR)/suid_exec;\
#	then	$(SIZE)	 $(TESTDIR)/suid_exec;\
#	fi

strip: all
	$(STRIP)  $(TESTDIR)/$(SH)
#	if test -x $(TESTDIR)/suid_exec;\
#	then	$(STRIP)  $(TESTDIR)/suid_exec;\
#	fi

#ident	"@(#)ksh93:src/lib/libast/conflib.h	1.1"

/* : : generated by proto : : */

#if !defined(__PROTO__)
#if defined(__STDC__) || defined(__cplusplus) || defined(_proto) || defined(c_plusplus)
#if defined(__cplusplus)
#define __MANGLE__	"C"
#else
#define __MANGLE__
#endif
#define __STDARG__
#define __PROTO__(x)	x
#define __OTORP__(x)
#define __PARAM__(n,o)	n
#if !defined(__STDC__) && !defined(__cplusplus)
#if !defined(c_plusplus)
#define const
#endif
#define signed
#define void		int
#define volatile
#define __V_		char
#else
#define __V_		void
#endif
#else
#define __PROTO__(x)	()
#define __OTORP__(x)	x
#define __PARAM__(n,o)	o
#define __MANGLE__
#define __V_		char
#define const
#define signed
#define void		int
#define volatile
#endif
#if defined(__cplusplus) || defined(c_plusplus)
#define __VARARG__	...
#else
#define __VARARG__
#endif
#if defined(__STDARG__)
#define __VA_START__(p,a)	va_start(p,a)
#else
#define __VA_START__(p,a)	va_start(p)
#endif
#endif
#define _ast_sysconf(x)	0
#define _sysconf(x)	0

/* : : generated by conf from conf.tab : : */

#define _LOCAL_CHILD_MAX local_child_max()
#if _lib_fork
#define child() fork()
#else
#ifdef _map_spawnve
#define _map_spawnve _map_spawnve
#endif
extern __MANGLE__ int spawnve __PROTO__((const char*, char* const[], char* const[]));
static char* cmd[] = { "/bin/echo", 0 };
#define child() spawnve(cmd[0],cmd,(char**)0)
#endif
static int
local_child_max __PARAM__((void), ()){
int i;
int n;
for (i = 3; i < 512 && (n = child()) >= 0; i++)
if (!n) _exit(0);
while (wait((int*)0) > 0);
for (n = 8; n < i; n <<= 1);
return(n);
}
#include "FEATURE/wait"
#ifdef WUNTRACED
#define _LOCAL_JOB_CONTROL 1
#endif
#ifdef CHAR_BIT
#define _LOCAL_LONG_BIT (CHAR_BIT*sizeof(long))
#else
#define _LOCAL_LONG_BIT (8*sizeof(int))
#endif
#ifdef MAXNAMLEN
#define _LOCAL_NAME_MAX MAXNAMLEN
#else
#define _LOCAL_NAME_MAX local_name_max()
#if !_lib_remove || _lib_unlink
#define remove unlink
#endif
static int
local_name_max __PARAM__((void), ()){
int i;
int n;
int v;
char name[256];
for (i = 0; i < sizeof(name); i++)
name[i] = 'F';
name[8] = '.';
name[sizeof(name) - 1] = 0;
if ((n = creat(name, 0666)) >= 0)
{
close(n);
for (v = 12; v < sizeof(name); v++)
{
name[v] = 0;
if (remove(name) >= 0) break;
name[v] = 'F';
}
}
else for (v = 12; v < sizeof(name); v++)
{
name[v] = 0;
if ((n = creat(name, 0666)) >= 0)
{
close(n);
remove(name);
name[v] = 'F';
}
else
{
v--;
break;
}
}
return(v);
}
#endif
#if _lib_getgroups
#define _LOCAL_NGROUPS_MAX local_ngroups_max()
static int
local_ngroups_max()
{
int n;
gid_t g;
if ((n = getgroups(0, &g)) < 0)
#ifdef NGROUPS
n = NGROUPS;
#else
n = 0;
#endif
return(n);
}
#endif
#if _lib_getdtablesize
extern __MANGLE__ int getdtablesize __PROTO__((void));
#define _LOCAL_OPEN_MAX getdtablesize()
#else
#define _LOCAL_OPEN_MAX local_open_max()
#if _lib_getrlimit && _sys_resource
#include <sys/time.h>
#include <sys/resource.h>
#endif
#ifdef RLIMIT_NOFILE
static int
local_open_max __PARAM__((void), ()){
struct rlimit rlim;
if (getrlimit(RLIMIT_NOFILE, &rlim))
return(-1);
return(rlim.rlim_cur);
}
#else
static int
local_open_max __PARAM__((void), ()){
int i;
int n;
int v;
n = 0;
v = 2;
while ((i = dup(0)) >= 0)
{
if (!n) n = i;
if (i > v) v = i;
}
while (n <= v) close(n++);
return(v + 1);
}
#endif
#endif
#if _lib_getpagesize
extern __MANGLE__ ssize_t getpagesize __PROTO__((void));
#define _LOCAL_PAGESIZE getpagesize()
#endif
#if _lib_setuid && !_lib_setreuid
#define _LOCAL_SAVED_IDS 1
#endif
#if PATH_MAX
#define _LOCAL_SYMLINK_MAX (PATH_MAX-1)
#endif
#ifdef CHAR_BIT
#define _LOCAL_WORD_BIT (CHAR_BIT*sizeof(int))
#else
#define _LOCAL_WORD_BIT (8*sizeof(int))
#endif
#undef	_ast_sysconf
#undef	_sysconf

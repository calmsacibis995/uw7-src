#ident	"@(#)ksh93:include/ast/ast_fs.h	1.1"
/***************************************************************
*                                                              *
*                      AT&T - PROPRIETARY                      *
*                                                              *
*         THIS IS PROPRIETARY SOURCE CODE LICENSED BY          *
*                          AT&T CORP.                          *
*                                                              *
*                Copyright (c) 1995 AT&T Corp.                 *
*                     All Rights Reserved                      *
*                                                              *
*           This software is licensed by AT&T Corp.            *
*       under the terms and conditions of the license in       *
*       http://www.research.att.com/orgs/ssr/book/reuse        *
*                                                              *
*               This software was created by the               *
*           Software Engineering Research Department           *
*                    AT&T Bell Laboratories                    *
*                                                              *
*               For further information contact                *
*                     gsf@research.att.com                     *
*                                                              *
***************************************************************/

/* : : generated by proto : : */
/* : : generated from features/fs by iffe version 05/09/95 : : */
                  
#ifndef _def_fs_ast
#if !defined(__PROTO__)
#if defined(__STDC__) || defined(__cplusplus) || defined(_proto) || defined(c_plusplus)
#if defined(__cplusplus)
#define __MANGLE__	"C"
#else
#define __MANGLE__
#endif
#define __STDARG__
#define __PROTO__(x)	x
#define __OTORP__(x)
#define __PARAM__(n,o)	n
#if !defined(__STDC__) && !defined(__cplusplus)
#if !defined(c_plusplus)
#define const
#endif
#define signed
#define void		int
#define volatile
#define __V_		char
#else
#define __V_		void
#endif
#else
#define __PROTO__(x)	()
#define __OTORP__(x)	x
#define __PARAM__(n,o)	o
#define __MANGLE__
#define __V_		char
#define const
#define signed
#define void		int
#define volatile
#endif
#if defined(__cplusplus) || defined(c_plusplus)
#define __VARARG__	...
#else
#define __VARARG__
#endif
#if defined(__STDARG__)
#define __VA_START__(p,a)	va_start(p,a)
#else
#define __VA_START__(p,a)	va_start(p)
#endif
#endif

#define _def_fs_ast	1
#define _sys_types	1	/* #include <sys/types.h> ok */
#define _sys_stat	1	/* #include <sys/stat.h> ok */
#define _mac__STAT_VER	1	/* _STAT_VER is a macro */
#define _mac__MKNOD_VER	1	/* _MKNOD_VER is a macro */

#ifndef _def_param_lcl
#ifndef S_ISUID
#if !defined(_AST_H) && !defined(_TM_H)
#include <sys/types.h>
#endif
#if defined(__STDPP__directive) && defined(__STDPP__hide)
#if !_mac__MKNOD_VER && !_mac_mknod
__STDPP__directive pragma pp:hide mknod
#endif
#if !_mac__STAT_VER && !_mac_fstat
__STDPP__directive pragma pp:hide fstat
#endif
#if !_mac__STAT_VER && !_mac_lstat
__STDPP__directive pragma pp:hide lstat
#endif
__STDPP__directive pragma pp:hide chmod mkdir mkfifo umask SF_APPEND
#else
#if !_mac__MKNOD_VER && !_mac_mknod
#define mknod ______mknod
#endif
#if !_mac__STAT_VER && !_mac_fstat
#define fstat ______fstat
#endif
#if !_mac__STAT_VER && !_mac_lstat
#define lstat ______lstat
#endif
#define chmod ______chmod
#define mkdir ______mkdir
#define mkfifo ______mkfifo
#define umask ______umask
#undef	SF_APPEND
#endif
#include <sys/stat.h>
#if defined(__STDPP__directive) && defined(__STDPP__hide)
#if !_mac__MKNOD_VER && !_mac_mknod
__STDPP__directive pragma pp:nohide mknod
#endif
#if !_mac__STAT_VER && !_mac_fstat
__STDPP__directive pragma pp:nohide fstat
#endif
#if !_mac__STAT_VER && !_mac_lstat
__STDPP__directive pragma pp:nohide lstat
#endif
__STDPP__directive pragma pp:nohide chmod mkdir mkfifo umask SF_APPEND
#else
#if !_mac__MKNOD_VER && !_mac_mknod
#undef	mknod
#endif
#if !_mac__STAT_VER && !_mac_fstat
#undef	fstat
#endif
#if !_mac__STAT_VER && !_mac_lstat
#undef	lstat
#endif
#undef	chmod
#undef	mkdir
#undef	mkfifo
#undef	umask
#undef	SF_APPEND
#define SF_APPEND	_SF_APPEND
#endif
#endif
#endif
#define FS_default	"ufs"
#if defined(__STDPP__directive) && defined(__STDPP__initial)
__STDPP__directive pragma pp:initial
#endif
#ifndef major
#define major(x) ((int)(((unsigned)(x)>>8)&0377))
#endif
#ifndef minor
#define minor(x) ((int)((x)&0377))
#endif
#ifndef makedev
#define makedev(x,y) ((dev_t)((((x)&0377)<<8)|((y)&0377)))
#endif
#if defined(__STDPP__directive) && defined(__STDPP__initial)
__STDPP__directive pragma pp:noinitial
#endif
#define _mem_st_blocks_stat	1	/* st_blocks is member of struct stat */
#define _mem_st_blksize_stat	1	/* st_blksize is member of struct stat */
#define _mem_st_rdev_stat	1	/* st_rdev is member of struct stat */
#define _sys_statfs	1	/* #include <sys/statfs.h> ok */
#define _mem_f_files_statfs	1	/* f_files is member of struct statfs */
#define _hdr_mnttab	1	/* #include <mnttab.h> ok */
#define _lib_statfs	1	/* statfs() in default lib(s) */
#define _lib_statvfs	1	/* statvfs() in default lib(s) */
#define _sys_mount	1	/* #include <sys/mount.h> ok */
#define _sys_statvfs	1	/* #include <sys/statvfs.h> ok */
#define _sys_vfs	1	/* #include <sys/vfs.h> ok */
#define _lib_statfs4	1	/* compile{} passed */

#if _sys_statvfs
#include <sys/statvfs.h>
#else
struct statvfs
{
unsigned long	f_bsize;	/* fundamental file system block size */
unsigned long	f_frsize;	/* fragment size */
unsigned long	f_blocks;	/* total # of blocks of f_frsize on fs */
unsigned long	f_bfree;	/* total # of free blocks of f_frsize */
unsigned long	f_bavail;	/* # of free blocks avail to non-superuser */
unsigned long	f_files;	/* total # of file nodes (inodes) */
unsigned long	f_ffree;	/* total # of free file nodes */
unsigned long	f_favail;	/* # of free nodes avail to non-superuser */
unsigned long	f_fsid;		/* file system id (dev for now) */
char		f_basetype[16]; /* target fs type name, null-terminated */
unsigned long	f_flag;		/* bit-mask of flags */
unsigned long	f_namemax;	/* maximum file name length */
char		f_fstr[32];	/* filesystem-specific string */
unsigned long	f_filler[16];	/* reserved for future expansion */
};
extern __MANGLE__ int	fstatvfs __PROTO__((int, struct statvfs*));
extern __MANGLE__ int	statvfs __PROTO__((const char*, struct statvfs*));
#endif
#define _str_st_fstype	1	/* stat.st_fstype is a string */
#define _ary_st_pad4	1	/* stat.st_pad4 is an array */
#endif

#!/bin/sh
#
#******************************************************************************
#
#	ident @(#) charm 11.2 97/12/04 
#
#******************************************************************************
#
#	Copyright (C) 1993-1997 The Santa Cruz Operation, Inc.
#		All Rights Reserved.
#
#	The information in this file is provided for the exclusive use of
#	the licensees of The Santa Cruz Operation, Inc.  Such users have the
#	right to use, modify, and incorporate this code into other products
#	for purposes authorized by the license agreement provided they include
#	this notice and the associated copyright notice with any such product.
#	The information in this file is provided "AS IS" without warranty.
#
#******************************************************************************
#
# Semi-automated test suite for channel table editor client-- 
# for CHARM specific portions of the code.
#
# Attempts to achieve complete branch coverage of
#	mapFile.tcl
#	channel.tcl
#	intl.tcl
#	main.tcl 
#	ui.tcl
#	uimenu.tcl
#	uitoolbar.tcl
#
# Refer to charm.plan for test setup and instructions.
#
#******************************************************************************

#
# utility routines
#

# execute a list of test cases
testlist() \
{
	name=$1
	shift
	for i in $*
	do
		TEST=${name}$i
		echo "$TEST: BEGIN"

		retry=y
		while [ "$retry" = "y" ]
		do
			${name}$i
			code=$?
			if [ $code -ne 0 ]
			then
				echo "Failed: retry (y/n) [y]: \c"
				retry=`line`
				if [ "$retry" = "" ]
				then
					retry="y"
				fi
			else
				retry=n
			fi
		done
		passfail $code
		echo "$TEST: END"
		echo ""
	done
}

passfail() \
{
	result=$1
	if [ $# -eq 2 ]
	then
		message=$2
	fi

	if [ "$1" = "0" ]
	then
		echo $TEST: PASS
	else
		echo $TEST: $message : FAIL
	fi
}

cleanup() \
{
	rm -f ${TMPDIR}/*
}

#
# test cases
#


channel_charm_core_entry_add() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.entry_add
	expected=$TMPDIR/channel.entry_add.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '
	/^foo.pdev.sco.com.*$/a\
newHost.sco.com	mail.sco.com
	' $testfile >$expected
	$PROGRAM -f $tmpfile -h dromeda.pdev.sco.com 1>$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

channel_gui_core_entry_delete()
{
        cleanup
        testfile=$TESTFILEDIR/channel.1
        tmpfile=$TMPDIR/channel.entry_delete
        expected=$TMPDIR/channel.entry_delete.expected
        diffout=$TMPDIR/out.diff
        cp $testfile $tmpfile

        sed '/^yikes\.london\.sco\.com.*$/d' $testfile >$expected
        $PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
        if [ $? -ne 0 ]
        then
                if [ -s $STDOUT ]
                then
                        echo "STDOUT:\n`cat $STDOUT`"
                fi
                if [ -s $STDERR ]
                then
                        echo "STDERR:\n`cat $STDERR`"
                fi
                return 1
        fi
        diff $expected $tmpfile
        return $?
}

channel_charm_core_entry_delete_all() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.2
	tmpfile=$TMPDIR/channel.entry_delete_all
	expected=$TMPDIR/channel.entry_delete_all.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	echo "# test file channel.2" > $expected
	echo "" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

channel_charm_core_entry_modify() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.entry_modify
	expected=$TMPDIR/channel.entry_modify.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '
	s/^spam.pdev.sco.com.*$/bean.pdev.sco.com	email.pdev.sco.com/
	s/^foo\.pdev\.sco\.com.*$/modified.sco.com	ns.pdev.sco.COM/
	' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

channel_charm_core_entry_move() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.2
	tmpfile=$TMPDIR/channel.entry_move
	expected=$TMPDIR/channel.entry_move.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	echo "# test file channel.2" > $expected
	echo "" >> $expected
	echo "foo.pdev.sco.com	email.pdev.sco.com" >> $expected
	echo "spam.pdev.sco.com	email.pdev.sco.com" >> $expected
	echo "yikes.london.sco.com	email.london.sco.com" >> $expected
	echo "uwhelp.com	tehama.sco.com" >> $expected
	echo "tech.newjersey.sco.com	emailnj.pdev.sco.com" >> $expected
	echo "test.newjersey.sco.com	email.newjersey.sco.com" >> $expected
	echo "dromeda.pdev.sco.com	dromeda.pdev.sco.com" >> $expected
	echo "build.pdev.sco.com	email.pdev.sco.com" >> $expected
	echo "build.newjersey.sco.com	email.newjersey.sco.com" >> $expected
	echo "yikes.newjersey.sco.com	email2.newjersey.sco.com" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

channel_charm_core_entry_save() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.3
	tmpfile=$TMPDIR/channel.entry_save
	expected=$TMPDIR/channel.entry_save.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

 	sed '
        /^yikes\.london\.sco\.com.*$/a\
newHost.sco.com	mail.sco.com
        ' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

channel_charm_core_entry_exit_no_save() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.entry_exit_no_save
	expected=$TMPDIR/channel.entry_exit_no_save.expected
	cp $testfile $tmpfile
	cp $testfile $expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

channel_charm_core_entry_exit_cancel() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.entry_exit_cancel
	expected=$TMPDIR/channel.entry_exit_cancel.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

 	sed '
        s/^yikes\.london\.sco\.com.*$/newHost.sco.com	mail.sco.com/
        s/^uwhelp\.com.*$/uwhelp.com	mail2.sco.com/
	' $testfile >$expected
	$PROGRAM -f $tmpfile
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

channel_charm_core_file_doesnt_exist() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.file_doesnt_exist
	expected=$TMPDIR/channel.file_doesnt_exist.expected

	echo "newHost.sco.com	mail.sco.com" >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

channel_charm_core_file_doesnt_exist_exit() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.file_doesnt_exist_exit
	expected=$TMPDIR/channel.file_doesnt_exist_exit.expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	if [ -f $tmpfile ]
	then
		echo "File $tmpfile should not exist"
		return 1
	fi

	# ensure database is not there
	if [ -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db should not exist"
		return 1
	fi

	return 0
}

channel_charm_core_file_doesnt_exist_empty() 
{
	cleanup
	tmpfile=$TMPDIR/channel.file_doesnt_exist_empty

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# ensure that file exists
	if [ ! -f $tmpfile ]
	then
		echo "File $tmpfile does not exist"
		return 1
	fi

	# ensure that file is empty
	if [ -s $tmpfile ]
	then
		echo "File $tmpfile is not empty"
		return 1
	fi

	# ensure database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

channel_charm_core_options() 
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.options
	cp $testfile $tmpfile

	# remove the scoadmin preferences file
	rm -f $HOME/.scoadmin.pref
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# ensure that scoadmin preferences file exists
	if [ ! -f $HOME/.scoadmin.pref ]
	then
		echo "File $HOME/.scoadmin.pref does not exist"
		return 1
	fi

	# ensure that file contains channel table editor preferences
	prefs=`sed '/^channel:$/ { N; N; s/channel:\n	shorthelp=0/FOUND/; }' $HOME/.scoadmin.pref`
	if [ "$prefs" != "FOUND" ]
	then
		echo "$HOME/.scoadmin.pref does not contain:"
		echo "channel:"
		echo "	toolbarVisibility=0"
		echo "	shorthelp=0"
		return 1
	fi

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	return 0
}

channel_charm_error_directory()
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.directory
	expected=$TMPDIR/channel.directory.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	$PROGRAM -f $TMPDIR  >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

channel_charm_error_write()
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.error_write
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t channel_charm_error_write >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

channel_charm_error_database()
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.error_database
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t channel_charm_error_database >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

channel_charm_error_load()
{
	cleanup
	testfile=$TESTFILEDIR/channel.1
	tmpfile=$TMPDIR/channel.error_load
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t channel_charm_error_load >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

#
# main()
#

TEST=""

if [ "$TESTDIR" = "" ]
then
	TESTDIR=`pwd`
fi

if [ "$PROGDIR" = "" ]
then
	PROGDIR=/etc/mail/admin
fi

# invoke the channel program in a separate xterm
PROGRAM="/usr/bin/X11/xterm -bg black -fg white -e $PROGDIR/channel"
TESTFILEDIR=$TESTDIR/testfiles

# TMPDIR is the directory for temporary test files.
# When writing this test script, I had trouble when the file
# argument to the channel program was greater than 80 chars--
# cm_tcld would just hang.  So, first try putting the temp
# directory under $TESTDIR; if that path is too long, just
# put it under /tmp.
TMPDIR=$TESTDIR/tmp
chars=`echo $TMPDIR | wc -c`
len=`expr $chars + 10`
if [ $len -ge 80 ]
then
	TMPDIR=/tmp/tmptest
fi

# files to redirect stdout and stderr
STDOUT=$TMPDIR/out.stdout
STDERR=$TMPDIR/out.stderr

# must execute in CHARM mode
CHARM=TRUE
export CHARM

if [ ! -d $TMPDIR ]
then
	mkdir -p $TMPDIR
fi

# module prefix is composed of the client being tested (channel)
# and this test script name (charm) -- used in case there are similar
# test procedure names that must be differentiated in common code (like
# the admin/lib files)
modulePrefix="channel_charm_"

core="entry_add entry_delete_all entry_modify entry_move entry_save"

cleanup
rm -f $HOME/.scoadmin.pref

testlist ${modulePrefix}core_ $core

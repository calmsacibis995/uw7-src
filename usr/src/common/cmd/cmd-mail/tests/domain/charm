#!/bin/sh
#
#******************************************************************************
#
#	ident @(#) charm 11.1 97/10/30 
#
#******************************************************************************
#
#	Copyright (C) 1993-1997 The Santa Cruz Operation, Inc.
#		All Rights Reserved.
#
#	The information in this file is provided for the exclusive use of
#	the licensees of The Santa Cruz Operation, Inc.  Such users have the
#	right to use, modify, and incorporate this code into other products
#	for purposes authorized by the license agreement provided they include
#	this notice and the associated copyright notice with any such product.
#	The information in this file is provided "AS IS" without warranty.
#
#******************************************************************************
#
# Semi-automated test suite for domain table editor client--
# for CHARM specific portions of the code.
#
# Attempts to achieve complete branch coverage of
#	mapFile.tcl
#	domain.tcl
#	intl.tcl
#	main.tcl 
#	ui.tcl
#	uimenu.tcl
#	uitoolbar.tcl
#
# Refer to charm.plan for test setup and instructions.
#
#******************************************************************************

#
# utility routines
#

# execute a list of test cases
testlist() \
{
	name=$1
	shift
	for i in $*
	do
		TEST=${name}$i
		echo "$TEST: BEGIN"

		retry=y
		while [ "$retry" = "y" ]
		do
			${name}$i
			code=$?
			if [ $code -ne 0 ]
			then
				echo "Failed: retry (y/n) [y]: \c"
				retry=`line`
				if [ "$retry" = "" ]
				then
					retry="y"
				fi
			else
				retry=n
			fi
		done
		passfail $code
		echo "$TEST: END"
		echo ""
	done
}

passfail() \
{
	result=$1
	if [ $# -eq 2 ]
	then
		message=$2
	fi

	if [ "$1" = "0" ]
	then
		echo $TEST: PASS
	else
		echo $TEST: $message : FAIL
	fi
}

cleanup() \
{
	rm -f ${TMPDIR}/*
}

#
# test cases
#


domain_charm_core_entry_add() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.entry_add
	expected=$TMPDIR/domain.entry_add.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '
	/^foo.pdev.sco.com.*$/a\
.newHost.sco.com	mail.sco.com route1.sco.com route2.sco.com
	' $testfile >$expected
	$PROGRAM -f $tmpfile -h dromeda.pdev.sco.com >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_entry_delete() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.entry_delete
	expected=$TMPDIR/domain.entry_delete.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '/^\.london.sco.com.*$/d' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_entry_delete_all() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.3
	tmpfile=$TMPDIR/domain.entry_delete_all
	expected=$TMPDIR/domain.entry_delete_all.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	echo "# test file domain.3" > $expected
	echo "" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_entry_modify() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.entry_modify
	expected=$TMPDIR/domain.entry_modify.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '
	s/^spam.pdev.sco.com.*$/& newhop.pdev.sco.com/
	s/^\.sco.com.*$/modified.sco.com	tehama.sco.com ns.pdev.sco.COM gw1.sco.com newgw2.sco.com/
	' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_entry_move() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.entry_move
	expected=$TMPDIR/domain.entry_move.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	echo "# test file domain.1" > $expected
	echo "" >> $expected
	echo "foo.pdev.sco.com	email.pdev.sco.com" >> $expected
	echo ".sco.com		tehama.sco.com gw1.sco.com gw2.sco.com" >> $expected
	echo "spam.pdev.sco.com	email.pdev.sco.com" >> $expected
	echo "uwhelp.com		tehama.sco.com" >> $expected
	echo ".london.sco.com	email2.pdev.sco.com hop1.pdev.sco.com hop2.london.sco.com" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_delete_route() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.2
	tmpfile=$TMPDIR/domain.delete_route
	expected=$TMPDIR/domain.delete_route.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

 	sed '
	s/^\.london.sco.com.*$/.london.sco.com	email2.pdev.sco.com hop2.pdev.sco.com hop3.pdev.sco.com hop4.pdev.sco.com hop6.london.sco.com/
        ' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_entry_save() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.entry_save
	expected=$TMPDIR/domain.entry_save.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

 	sed '
        /^\.london.sco.com.*$/a\
.newHost.sco.com	mail.sco.com route1.sco.com route2.sco.com
        ' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

domain_charm_core_entry_exit_no_save() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.entry_exit_no_save
	expected=$TMPDIR/domain.entry_exit_no_save.expected
	cp $testfile $tmpfile
	cp $testfile $expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_entry_exit_cancel() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.entry_exit_cancel
	expected=$TMPDIR/domain.entry_exit_cancel.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

 	sed '
        s/^\.london.sco.com.*$/.newHost.sco.com	mail.sco.com newHop.pdev.sco.com/
        s/^uwhelp.com.*$/.newHost2.sco.com	mail2.sco.com/
	' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_core_file_doesnt_exist() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.file_doesnt_exist
	expected=$TMPDIR/domain.file_doesnt_exist.expected

	echo "newHost.sco.com	mail.sco.com route3.sco.com route2.sco.com route1.sco.com" >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

domain_charm_core_file_doesnt_exist_exit() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.file_doesnt_exist_exit
	expected=$TMPDIR/domain.file_doesnt_exist_exit.expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	if [ -f $tmpfile ]
	then
		echo "File $tmpfile should not exist"
		return 1
	fi

	# ensure database is not there
	if [ -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db should not exist"
		return 1
	fi

	return 0
}

domain_charm_core_file_doesnt_exist_empty() 
{
	cleanup
	tmpfile=$TMPDIR/domain.file_doesnt_exist_empty

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# ensure that file exists
	if [ ! -f $tmpfile ]
	then
		echo "File $tmpfile does not exist"
		return 1
	fi

	# ensure that file is empty
	if [ -s $tmpfile ]
	then
		echo "File $tmpfile is not empty"
		return 1
	fi

	# ensure database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

domain_charm_core_options() 
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.options
	cp $testfile $tmpfile

	# remove the scoadmin preferences file
	rm -f $HOME/.scoadmin.pref
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# ensure that scoadmin preferences file exists
	if [ ! -f $HOME/.scoadmin.pref ]
	then
		echo "File $HOME/.scoadmin.pref does not exist"
		return 1
	fi

	# ensure that file contains domain table editor preferences
	prefs=`sed '/^domain:$/ { N; N; s/domain:\n	toolbarVisibility=0\n	shorthelp=0/FOUND/; }' $HOME/.scoadmin.pref`
	if [ "$prefs" != "FOUND" ]
	then
		echo "$HOME/.scoadmin.pref does not contain:"
		echo "domain:"
		echo "	toolbarVisibility=0"
		echo "	shorthelp=0"
		return 1
	fi

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	return 0
}

domain_charm_error_directory()
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.directory
	expected=$TMPDIR/domain.directory.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	$PROGRAM -f $TMPDIR  >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

domain_charm_error_write()
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.error_write
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t domain_charm_error_write >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

domain_charm_error_database()
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.error_database
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t domain_charm_error_database >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

domain_charm_error_load()
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.error_load
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t domain_charm_error_load >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

domain_charm_auto_usage()
{
	cleanup
	testfile=$TESTFILEDIR/domain.1
	tmpfile=$TMPDIR/domain.auto_usage
	ret=0

	# test no command line arguments
	$PROGRAM >$STDOUT 2>$STDERR
	if [ $? -eq 0 ]
	then
		echo "no error on no command line args"
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		ret=1
	fi
	grep "Usage" $STDERR 1>/dev/null 2>&1
	if [ $? -eq 1 ]
	then
		echo "no command line args-- no Usage message"
		ret=1
	fi

	# test missing -f arg
	$PROGRAM -f >$STDOUT 2>$STDERR
	if [ $? -eq 0 ]
	then
		echo "no error on missing -f flag arg"
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		ret=1
	fi
	grep "Usage" $STDERR 1>/dev/null 2>&1
	if [ $? -eq 1 ]
	then
		echo "missing -f arg-- no Usage message"
		ret=1
	fi

	# test missing -h arg
	$PROGRAM -h >$STDOUT 2>$STDERR
	if [ $? -eq 0 ]
	then
		echo "no error on missing -h flag arg"
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		ret=1
	fi
	grep "Usage" $STDERR 1>/dev/null 2>&1
	if [ $? -eq 1 ]
	then
		echo "missing -h arg-- no Usage message"
		ret=1
	fi

	# test too many command line args
	$PROGRAM -f $tmpfile extra >$STDOUT 2>$STDERR
	if [ $? -eq 0 ]
	then
		echo "no error on extra command line arg"
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		ret=1
	fi
	grep "Usage" $STDERR 1>/dev/null 2>&1
	if [ $? -eq 1 ]
	then
		echo "extra command line arg-- no Usage message"
		ret=1
	fi

	return $ret
}

#
# main()
#

TEST=""

if [ "$TESTDIR" = "" ]
then
	TESTDIR=`pwd`
fi

if [ "$PROGDIR" = "" ]
then
	PROGDIR=/etc/mail/admin
fi

# invoke the domain program in a separate xterm
PROGRAM="/usr/bin/X11/xterm -bg black -fg white -e $PROGDIR/domain"
TESTFILEDIR=$TESTDIR/testfiles

# TMPDIR is the directory for temporary test files.
# When writing this test script, I had trouble when the file
# argument to the domain program was greater than 80 chars--
# VtOpen would fail.  So, first try putting the temp
# directory under $TESTDIR; if that path is too long, just
# put it under /tmp.
TMPDIR=$TESTDIR/tmp
chars=`echo $TMPDIR | wc -c`
len=`expr $chars + 10`
if [ $len -ge 80 ]
then
        TMPDIR=/tmp/tmptest
fi

STDOUT=$TMPDIR/out.stdout
STDERR=$TMPDIR/out.stderr

# execute in CHARM mode
CHARM=TRUE
export CHARM

if [ ! -d $TMPDIR ]
then
	mkdir -p $TMPDIR
fi

# module prefix is composed of the client being tested (domain)
# and this test script name (charm) -- used in case there are similar
# test procedure names that must be differentiated in common code (like
# the admin/lib files)
modulePrefix="domain_charm_"

core="entry_add entry_delete_all entry_modify entry_move delete_route entry_save" 

cleanup
rm -f $HOME/.scoadmin.pref

testlist ${modulePrefix}core_ $core

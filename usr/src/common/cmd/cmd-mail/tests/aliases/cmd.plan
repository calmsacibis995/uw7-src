#===============================================================================
#
#	ident @(#) cmd.plan 11.1 97/10/30 
#
#******************************************************************************
#
#	Copyright (C) 1993-1997 The Santa Cruz Operation, Inc.
#		All Rights Reserved.
#
#	The information in this file is provided for the exclusive use of
#	the licensees of The Santa Cruz Operation, Inc.  Such users have the
#	right to use, modify, and incorporate this code into other products
#	for purposes authorized by the license agreement provided they include
#	this notice and the associated copyright notice with any such product.
#	The information in this file is provided "AS IS" without warranty.
#
#******************************************************************************
#
# Modification History
#
# M000, 26-Mar-97, andrean
#	- Created.
#
#===============================================================================
		
			Mail Admin Gui : Aliases Client
		      Test Plan for command line options
		      ----------------------------------

This is the fully-automated portion of the test plan.

We have a primitive branch coverage tool for tcl, which this test
plan uses.  This tool creates annotated versions of the source files,
marking all branches that have not been executed-- this allowed us
to create test cases towards the goal of executing all branches.


Setup and Execution:

1) The env variable TESTDIR may be set to the directory in which the test
   script "cmd" will exist and be run, and where input and output files
   for "cmd" will exist.  If TESTDIR is not set in your env, the script will 
   by default set it to the current working directory.  The following files 
   are expected to exist in $TESTDIR:
	$TESTDIR/testfiles/aliases.1
	$TESTDIR/testfiles/aliases.2
	$TESTDIR/testfiles/aliases.3
	$TESTDIR/testfiles/aliases.4
	$TESTDIR/testfiles/aliases.5

2) Set env variable PROGDIR to the directory in which the "aliases"
   executable exists.  If PROGDIR is not set in your env, this script
   will by default set it to /etc/mail/admin.  

   The "aliases" executable should be the instrumented version if you would 
   like to determine code coverage of the aliases client:
	 a) do a 'make aliasest' of the aliases src 
	 b) copy executable "aliasest" to $PROGDIR/aliases

3) Run the script "cmd" as root to invoke the automated tests.
   Test results will be sent to stdout.

4) To obtain complete coverage results, execute the gui.plan test plan
   as well, before doing the following steps:
	a) Execution of the "cmd" and "gui" scripts will have created many
	   files of the form trace.* into $TESTDIR.
	b) Copy *.tclt files from the src directory (generated by the make of
	   aliasest) into the $TESTDIR directory.
	c) Execute the "do_merge" script, which will output coverage results
	   to stdout, and also create files of the form *.tclt.a.  These
	   *.tclt.a files are annotated versions of the source files--
	   lines beginning with a ">_branch" in these files mark unexecuted 
	   branches.

The automated test cases are as follows:

aliases_cmd_core_usage:
	test missing -f flag
	test missing argument to -f flag
	test missing -f flag, when have -h flag
	test missing argument to -h flag
	test error when file specified is a directory
	test error when invalid database class is specified
	test missing recipient list for -a
	test missing alias list for -s
	test missing user for -s
	test blank user for -s
	test missing user for -r
	test missing alias list for -r
	test too many command line arguments

aliases_cmd_core_relative_pathname:
	test with filename specified as relative pathname

aliases_cmd_core_database_class
	test with a database class specified on the command line

aliases_cmd_core_add_alias:	
	add an alias with one member
	add an alias with more than one member
	
aliases_cmd_core_add_non_user_alias
	add an alias with program, file path, ":include:", \user type members

aliases_cmd_core_delete_alias
	delete an alias
	delete more than one alias

aliases_cmd_core_add_member
	add a simple member name to an alias
	add a program member to more than one alias, where that program
		has a colon ":" in it
	add an ":include:file" type of member to more than one alias
	add a member name to an alias which already has that member
	add a member to an alias which does not exist

aliases_cmd_core_subscribe
	subscribe a simple member name to all aliases
	subscribe a program member to all aliases
	subscribe more than one user to all aliases

aliases_cmd_core_remove_member
	remove a simple user name from one alias
	remove a program member from more than one alias
	remove a member name from an alias which does not contain that member
	remove a member name from a non-existent alias

aliases_cmd_core_retire
	retire a simple member name from all aliases, where that member does not
		belong to all aliases
	retire a simple member name from all aliases, where that member *does*
		belong to all aliases
	retire a program member name from all aliases
	retire more than one member from all aliases

aliases_cmd_error_save
	invoke an error in the save routine (proc SaveCB), by causing a failure
		in Table:Write (and thus in Alias:Write)

aliases_cmd_error_newaliases
	invoke an error return from newaliases (caused by calling newaliases
		with an empty sendmail.cf file)

aliases_cmd_error_alias_load
	invoke an error in load of alias file (proc alias_load), by causing
		a failure in Table:Read (and thus Alias:Read)

aliases_cmd_aliasFile_write
	perform a simple modification, and execute Alias:Write directly,
		ensuring file written correctly

aliases_cmd_aliasFile_defer_write
	test functionality of Alias:DeferWrites -- 
		- perform a simple modification
		- then do the Alias:DeferWrites
		- then execute the Alias:Write directly
		- ensure that the write did *not* occur

aliases_cmd_aliasFile_read
	test used to invoke a branch in Alias:ReadCB
		- read in a file with an illegal alias (one with no alias
		  name) and ensure that the file was treated as a comment

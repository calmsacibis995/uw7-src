#!/bin/sh
#
#******************************************************************************
#
#	ident @(#) gui 11.1 97/10/30 
#
#******************************************************************************
#
#	Copyright (C) 1993-1997 The Santa Cruz Operation, Inc.
#		All Rights Reserved.
#
#	The information in this file is provided for the exclusive use of
#	the licensees of The Santa Cruz Operation, Inc.  Such users have the
#	right to use, modify, and incorporate this code into other products
#	for purposes authorized by the license agreement provided they include
#	this notice and the associated copyright notice with any such product.
#	The information in this file is provided "AS IS" without warranty.
#
#******************************************************************************
#
# Semi-automated test suite for GUI parts of aliases editor client.
#
# Attempts to achieve complete branch coverage of aliasFile.tcl and aliases.tcl.
#
# Refer to gui.plan for test setup and instructions.
#
#******************************************************************************

#
# utility routines
#

# execute a list of test cases
testlist() \
{
	name=$1
	shift
	for i in $*
	do
		TEST=${name}$i
		echo "$TEST: BEGIN"

		retry=y
		while [ "$retry" = "y" ]
		do
			${name}$i
			code=$?
			if [ $code -ne 0 ]
			then
				echo "Failed: retry (y/n) [y]: \c"
				retry=`line`
				if [ "$retry" = "" ]
				then
					retry="y"
				fi
			else
				retry=n
			fi
		done
		passfail $code
		echo "$TEST: END"
		echo ""
	done
}

passfail() \
{
	result=$1
	if [ $# -eq 2 ]
	then
		message=$2
	fi

	if [ "$1" = "0" ]
	then
		echo $TEST: PASS
	else
		echo $TEST: $message : FAIL
	fi
}

cleanup() \
{
	rm -f ${TMPDIR}/*
}

#
# test cases
#

aliases_gui_core_usage() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_add
	expected=$TMPDIR/aliases.alias_add.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	echo "myNewAlias: member1, member2, member3" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_alias_add() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_add
	expected=$TMPDIR/aliases.alias_add.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	echo "myNewAlias: member1, member2, member3" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_alias_remove() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_remove
	expected=$TMPDIR/aliases.alias_remove.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '/^doprog:.*$/d' $testfile >$expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_alias_remove_all() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_remove_all
	expected=$TMPDIR/aliases.alias_remove_all.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	echo "# test file aliases.1" > $expected
	echo "" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_alias_modify() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_modify
	expected=$TMPDIR/aliases.alias_modify.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '/^doprog:.*$/d' $testfile >$expected
	echo 'doprogModified: cathy, newMember1, newMember2, root,\n	|"mailprog -a -b -c -d arg1, arg2"' >> $expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_alias_save() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_save
	expected=$TMPDIR/aliases.alias_save.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	echo "myNewAlias: member1, member2, member3" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

aliases_gui_core_alias_save_class() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_save_class
	expected=$TMPDIR/aliases.alias_save_class.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	echo "myNewAlias: member1, member2, member3" >> $expected
	$PROGRAM -f "hash:$tmpfile" >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check expected results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database exists
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

aliases_gui_core_alias_save_relative_pathname() 
{
	cleanup
	currentDir=`pwd`
	tmpDir=$currentDir/tmp
	if [ ! -d $tmpDir ]
	then
		mkdir $tmpDir
	fi

	testfile=$TESTFILEDIR/aliases.1
	# the relative pathname!
	tmpfile=tmp/aliases.alias_save_relative_pathname
	expected=$TMPDIR/aliases.alias_save_relative_pathname.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	echo "myNewAlias: member1, member2, member3" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check expected results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database exists
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

aliases_gui_core_alias_exit_no_save() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_exit_no_save
	expected=$TMPDIR/aliases.alias_exit_no_save.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_alias_exit_cancel() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.alias_exit_cancel
	expected=$TMPDIR/aliases.alias_exit_cancel.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	echo "myNewAlias: member1, member2, member3" >> $expected
	echo "secondAlias: user1, user2" >> $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_member_add() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.member_add
	expected=$TMPDIR/aliases.member_add.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '
	s/^doprog.*$/doprog: :include:\/file, \\newMember3, audrey, cathy, frank, harry, newMember1,/
	/^doprog.*/a\
	newMember2, patrick, root, |"mailprog -a -b -c arg1, arg2",\
	|"newProg arg1, arg2"' $testfile >$expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_member_remove() 
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.member_remove
	expected=$TMPDIR/aliases.member_remove.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed 's/^doprog:.*$/doprog: cathy/' $testfile >$expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_users_subscribe() {

	cleanup
	testfile=$TESTFILEDIR/aliases.2
	tmpfile=$TMPDIR/aliases.users_subscribe
	expected=$TMPDIR/aliases.users_subscribe.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '
	s/^\(.*: \)\(.*\)$/\1"|allprog arg1, arg2", \2/
	s/^appendfile:.*$/&, adm, kurth/
	s/^\(mailengr: .*keith, \)\(andrea.*\)$/\1adm, \2/
	s/^doprog: .*$/&,/
	/^doprog.*/a\
	subMember
	s/^\(mailengr-owner:.*\), kurth\(.*\)$/\1\2, subMember/
	' $testfile >$expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_users_retire() {

	cleanup
	testfile=$TESTFILEDIR/aliases.5
	tmpfile=$TMPDIR/aliases.users_retire
	expected=$TMPDIR/aliases.users_retire.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile

	sed '
	s/^\(appendfile:.*\), root$/\1/
	s/^doprog:.*$/doprog: audrey, cathy, frank, harry, patrick, |"mailprog -a -b -c arg1, arg2"/
	/^	|"mailprog -a -b -c arg1, arg2"$/d
	s/^mailengr: .*$/mailengr: \\keith, andrea, appendfile, bob, joanne, mail/
	/^	joanne.*$/d
	/^mailengr-owner: .*$/d
	s/^\(maintenance: \)"|allprog -a arg1, arg2", \(.*\)$/\1\2 george/
	/^	george, root$/d
	s/^support:.*$/support: andy, angela, gary, jacob, kathy, marin, patrice, rachel, randy,/
	/^	patrice.*$/d
	/^support:.*$/a\
	samantha, ted, theresa, wendy
	' $testfile >$expected
	echo 'root: "|rootFilter -a", sysadm' >> $expected
	echo "kurth: bob, /etc/mail/retire/kurth" >> $expected

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_core_file_doesnt_exist() 
{
	cleanup
	tmpfile=$TMPDIR/aliases.file_doesnt_exist
	expected=$TMPDIR/aliases.file_doesnt_exist.expected
	diffout=$TMPDIR/out.diff

	echo "myNewAlias: member1, member2, member3" > $expected
	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	diff $expected $tmpfile
	if [ $? -ne 0 ]
	then
		return 1
	fi

	# check that database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

aliases_gui_core_file_doesnt_exist_exit() 
{
	cleanup
	tmpfile=$TMPDIR/aliases.file_doesnt_exist_exit

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# check results
	if [ -f $tmpfile ]
	then
		echo "File $tmpfile should not exist"
		return 1
	fi

	# ensure database is not there
	if [ -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db should not exist"
		return 1
	fi

	return 0
}

aliases_gui_core_file_doesnt_exist_empty() 
{
	cleanup
	tmpfile=$TMPDIR/aliases.file_doesnt_exist_empty
	expected=$TMPDIR/aliases.file_doesnt_exist_empty.expected
	diffout=$TMPDIR/out.diff

	$PROGRAM -f $tmpfile >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi

	# ensure that file exists
	if [ ! -f $tmpfile ]
	then
		echo "File $tmpfile does not exist"
		return 1
	fi

	# ensure that file is empty
	if [ -s $tmpfile ]
	then
		echo "File $tmpfile is not empty"
		return 1
	fi

	# ensure database is there
	if [ ! -f ${tmpfile}.db ]
	then
		echo "Database ${tmpfile}.db is missing"
		return 1
	fi

	return 0
}

aliases_gui_error_invalid_class()
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.invalid_class
	expected=$TMPDIR/aliases.invalid_class.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	$PROGRAM -f "foobar:$tmpfile"  >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_error_directory()
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.directory
	expected=$TMPDIR/aliases.directory.expected
	diffout=$TMPDIR/out.diff
	cp $testfile $tmpfile
	cp $testfile $expected

	$PROGRAM -f $TMPDIR  >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	diff $expected $tmpfile
	return $?
}

aliases_gui_error_save()
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.error_save
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t aliases_gui_error_save >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

aliases_gui_error_newaliases()
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.error_newaliases
	cp $testfile $tmpfile

	touch /tmp/newaliases
	chmod a-rwx /tmp/newaliases

	$PROGRAM -f $tmpfile -t aliases_gui_error_newaliases >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

aliases_gui_error_alias_load()
{
	cleanup
	tmpfile=$TMPDIR/aliases.error_alias_load

	# invoke an error from Alias:Open
	touch $tmpfile
	$PROGRAM -f $tmpfile -t aliases_gui_error_alias_load >$STDOUT 2>$STDERR
	if [ $? -ne 0 ]
	then
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

aliases_gui_error_unexpected()
{
	cleanup
	testfile=$TESTFILEDIR/aliases.1
	tmpfile=$TMPDIR/aliases.error_unexpected
	cp $testfile $tmpfile

	$PROGRAM -f $tmpfile -t aliases_gui_error_unexpected >$STDOUT 2>$STDERR
	if [ $? -ne 1 ]
	then
		echo "Expected exit code 1."
		if [ -s $STDOUT ]
		then
			echo "STDOUT:\n`cat $STDOUT`"
		fi
		if [ -s $STDERR ]
		then
			echo "STDERR:\n`cat $STDERR`"
		fi
		return 1
	fi
	return 0
}

#
# main()
#

TEST=""

if [ "$TESTDIR" = "" ]
then
	TESTDIR=`pwd`
fi

if [ "$PROGDIR" = "" ]
then
	PROGDIR=/etc/mail/admin
fi

PROGRAM=$PROGDIR/aliases
TESTFILEDIR=$TESTDIR/testfiles
TMPDIR=$TESTDIR/tmp
STDOUT=$TMPDIR/out.stdout
STDERR=$TMPDIR/out.stderr

if [ ! -d $TMPDIR ]
then
	mkdir -p $TMPDIR
fi

# module prefix is composed of the client being tested (aliases)
# and this test script name (gui) -- used in case there are similar
# test procedure names that must be differentiated in common code (like
# the admin/lib files)
modulePrefix="aliases_gui_"

core="alias_add alias_remove alias_remove_all alias_modify alias_save \
	alias_save_class alias_save_relative_pathname alias_exit_no_save \
	alias_exit_cancel member_add member_remove users_subscribe \
	users_retire file_doesnt_exist file_doesnt_exist_exit \
	file_doesnt_exist_empty"

error="invalid_class directory save newaliases alias_load unexpected"

cleanup

testlist ${modulePrefix}core_ $core
testlist ${modulePrefix}error_ $error
